<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/16/2015 10:28:18 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="WIN03"
  DTS:CreatorName="WIN03\Administrator"
  DTS:DTSID="{69BFA602-9AF2-4D71-BAAA-A95C3D62627F}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="12.0.5000.0"
  DTS:LocaleID="1041"
  DTS:MaxErrorCount="50"
  DTS:ObjectName="999_SUB_DATA_IMPORT_PACKAGE"
  DTS:PackageType="5"
  DTS:VersionBuild="731"
  DTS:VersionGUID="{D2761E81-C64B-406B-B195-3A8011384351}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Logging.txt]"
      DTS:CreationName="FILE"
      DTS:DTSID="{30379D76-CB86-4A81-8938-6899180513E0}"
      DTS:ObjectName="Logging.txt">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::autoLoggerPath] +"\\"+ @[System::PackageName]  +"_"+ ((DT_WSTR,4)YEAR(DATEADD("Day",0,GETDATE()))  + RIGHT("00" + (DT_WSTR,2)MONTH(DATEADD("Day",0,GETDATE())),2) +  RIGHT("00" + (DT_WSTR,2)DAY(DATEADD("Day",0,GETDATE())),2))</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:FileUsageType="1"
          DTS:ConnectionString="D:\public\dailyLog\999_SUB_DATA_IMPORT_PACKAGE_20171025" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="Logging.txt"
      DTS:CreationName="Microsoft.LogProviderTextFile"
      DTS:Description="イベントのログ エントリを CSV ファイルに書き込みます"
      DTS:DTSID="{63AB6E87-5315-4F99-A110-3930AB02F721}"
      DTS:ObjectName="テキスト ファイルの SSIS ログ プロバイダー1">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6F6D8411-42B4-4CC7-9654-A87252EDB18F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="autoLoggerPath">
      <DTS:VariableValue
        DTS:DataType="8">D:\public\dailyLog</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BFEF17F9-94F3-49B9-91A7-863B0C19214A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="connectionString">
      <DTS:VariableValue
        DTS:DataType="8">Persist Security Info=False;User ID=sa;Initial Catalog=mini_md_db;Password=Minimd@0123;Data Source=10.130.105.16,1435</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4504D844-9ED6-4216-AF50-58182D2BED83}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="currentDate">
      <DTS:VariableValue
        DTS:DataType="7">12/22/2016</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{40051B72-9E6F-4B63-8CCC-80D7F1617E86}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="filePath">
      <DTS:VariableValue
        DTS:DataType="8">D:\public\receive\data</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F3E82700-D310-471C-898A-62E432994B7E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="mailFromId">
      <DTS:VariableValue
        DTS:DataType="8">minimd.ro@gmail.com</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{60532264-60D4-4617-87C4-5D8C2FEC6F53}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="mailFromName">
      <DTS:VariableValue
        DTS:DataType="8">MINIMD</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4A369B99-98CA-4C4F-9466-F6E8F0FD350D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="mailServer">
      <DTS:VariableValue
        DTS:DataType="8">smtp.gmail.com</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AD78E3DC-D36E-4DE6-AA1E-CFAD7BEA8C38}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="needToSleep">
      <DTS:VariableValue
        DTS:DataType="11">-1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A1E68B4F-224C-4756-9C5E-DFB6A5515DFC}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="packagePath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Projects\Source Code\Release Area\MINI-MD SYSTEM\MINI-MD SYSTEM\bin\Deployment</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9533B5B8-6F8C-4C50-AF3F-9D36D8686F76}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="sleepMinutes">
      <DTS:VariableValue
        DTS:DataType="3">10</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{14B6D18E-5715-489B-B600-7C32702FC9CE}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="GETDATE()"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="sysDate">
      <DTS:VariableValue
        DTS:DataType="7">10/25/2017 3:02:49 PM</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">4,7,OnError,13,OnInformation,12,OnTaskFailed,22,OnVariableValueChanged</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnInformation"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnTaskFailed"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnVariableValueChanged"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{63AB6E87-5315-4F99-A110-3930AB02F721}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\CHECK FILE EXISTS OR NOT (IF EXISTS THEN IMPORT DATA)"
      DTS:CreationName="STOCK:FORLOOP"
      DTS:Description="For ループ コンテナ"
      DTS:DTSID="{01F1983B-3862-434C-BCEA-F82235938AA7}"
      DTS:EvalExpression="@[User::needToSleep]==True"
      DTS:ExecutableType="STOCK:FORLOOP"
      DTS:LocaleID="1041"
      DTS:MaxConcurrent="1"
      DTS:ObjectName="CHECK FILE EXISTS OR NOT (IF EXISTS THEN IMPORT DATA)">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\CHECK FILE EXISTS OR NOT (IF EXISTS THEN IMPORT DATA)\ファイルを待ちます(SLEEP)"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="スクリプト タスク"
          DTS:DTSID="{CDC6E641-7F13-44A4-B2BA-C880D478624F}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="1041"
          DTS:ObjectName="ファイルを待ちます(SLEEP)"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_7be5186c8fcb4267ab6672ceeb3bbda1"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::needToSleep,User::sleepMinutes">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_9bef6c4deafb424fb02adfd298797f2f.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("right-on")]
[assembly: AssemblyProduct("ST_9bef6c4deafb424fb02adfd298797f2f.csproj")]
[assembly: AssemblyCopyright("Copyright @ right-on 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_9bef6c4deafb424fb02adfd298797f2f.csproj.Properties.Settings.get_Default():ST_9bef6c4deafb424fb02adfd298797f2f.csproj.Properties.Sett" +
    "ings")]

namespace ST_9bef6c4deafb424fb02adfd298797f2f.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[using System;

namespace ST_9bef6c4deafb424fb02adfd298797f2f.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        public void Main()
        {
            // TODO: Add your code here
            if (Convert.ToBoolean(Dts.Variables["User::needToSleep"].Value) == true)
            {
                double min = Convert.ToDouble(Dts.Variables["User::sleepMinutes"].Value) * 60;
                int ms = Convert.ToInt32(min * 1000);
                System.Threading.Thread.Sleep(ms);
            }
            Dts.TaskResult = (int)ScriptResults.Success;
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>st_9bef6c4deafb424fb02adfd298797f2f</msb:CodeName>
		<msb:DisplayName>st_9bef6c4deafb424fb02adfd298797f2f</msb:DisplayName>
		<msb:ProjectId>{0E8B541A-E5CE-47ED-8ECE-C2D9472CBFF4}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_7be5186c8fcb4267ab6672ceeb3bbda1.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="ST_7be5186c8fcb4267ab6672ceeb3bbda1.csproj"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  --><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><OutputType>Library</OutputType><NoStandardLibraries>false</NoStandardLibraries><RootNamespace>ST_9bef6c4deafb424fb02adfd298797f2f.csproj</RootNamespace><AssemblyName>ST_7be5186c8fcb4267ab6672ceeb3bbda1</AssemblyName><ProjectGuid>{A4661C1F-125F-4970-B713-B0F00A02410E}</ProjectGuid><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><WarningLevel>4</WarningLevel></PropertyGroup><!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><WarningLevel>4</WarningLevel></PropertyGroup><!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  --><PropertyGroup><PreBuildEvent></PreBuildEvent><PostBuildEvent></PostBuildEvent></PropertyGroup><!-- This sections specifies references for the project. --><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  --><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile><!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    --></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><!-- This section defines VSTA properties that describe the host-changable project properties. --><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" /><Host Name="SSIS_ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST120</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_9bef6c4deafb424fb02adfd298797f2f.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_9bef6c4deafb424fb02adfd298797f2f.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_9bef6c4deafb424fb02adfd298797f2f.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_9bef6c4deafb424fb02adfd298797f2f.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_9bef6c4deafb424fb02adfd298797f2f.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_7be5186c8fcb4267ab6672ceeb3bbda1.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAPgSCFgAAAAAAAAAAOAAAiELAQsAABAAAAAIAAAAAAAAHi8A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAMwuAABPAAAAAEAAAHAEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAJA8AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHAEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAA
LwAAAAAAAEgAAAACAAUA+CEAANQMAAABAAAAAAAAAEAhAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABMwAgBvAAAAAgAAEQIoFgAACm8XAAAKcoEAAHBvGAAACm8ZAAAKKBoA
AAosQQIoFgAACm8XAAAKcqUAAHBvGAAACm8ZAAAKKBsAAAojAAAAAAAATkBaCgYjAAAAAABAj0Ba
KBwAAAoLBygdAAAKAigWAAAKFm8eAAAKKh4CKB8AAAoqALQAAADOyu++AQAAAJEAAABsU3lzdGVt
LlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3Vs
dHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNv
dXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAABCU0pCAQABAAAA
AAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAADcAwAAI34AAEgEAAAgBgAAI1N0cmluZ3MAAAAAaAoA
AMwAAAAjVVMANAsAABAAAAAjR1VJRAAAAEQLAACQAQAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAA
APolMwAWAAABAAAAHwAAAAUAAAAGAAAACQAAAAEAAAAfAAAAAgAAAA8AAAACAAAAAgAAAAMAAAAE
AAAAAQAAAAQAAAABAAAAAQAAAAAACgABAAAAAAAGAM8AyAAKAOsA1gAOAEsBIgEGAGcByAAGAH0B
bAEGAK4BmQEGAGUCSwIGAJACfgIGAKcCfgIGAMQCfgIGAOMCfgIGAPwCfgIGABUDfgIGADADfgIG
AEsDfgIGAGQDfgIGAJ0DfQMGAL0DfQMGABIE/wMGAC8EyAAGADQEyAAGAFgEfgIKAIQEbgQKAJ0E
bgQGALIEfQMOANQEIgEOAPYEIgESAE8FLwUSAGcFLwUGAIMFyAAGALcFpgUAAAAAAQAAAAAAAQAB
AAAAEAAyADwABQABAAEAAAEQAHIAPAAJAAMABQABABAAewCGAA0ABAAIAAMBAACxAAAAEQAEAAoA
EQCNARMAEQC6ARcAEQAEAjkABgYtAkcAVoA1AkoAVoA9AkoAUCAAAAAAgxjKARsAAQBYIAAAAACT
CNABHwABAJEgAAAAAJMI5AEkAAEAmCAAAAAAkwjwASkAAQCgIAAAAACWCBQCPQACALMgAAAAAIYY
ygEbAAIApyAAAAAAkRjNBIkAAgC8IAAAAACGACgCGwACADchAAAAAIYYygEbAAIAAAABAEUCOQDK
AVgAQQDKAVgASQDKAVgAUQDKAVgAWQDKAVgAYQDKAVgAaQDKAVgAcQDKAVgAeQDKAVgAgQDKAVgA
iQDKAV0AkQDKARsAmQDKARsACQDKARsAoQBGBGIAoQBhBGkAKQDKAW4AuQDKAXoAyQDKARsAEQDK
ARsA0QDKARsAGQAIBY0A2QBZBZIA4QBwBZcA6QB5BZ0A8QCLBaEA8QCVBaYA8QCeBasA+QC+BbAA
2QDEBV0AGQDKARsACAAUAE4ACAAYAFMAKQCTAIAALgAbADIBLgAjADIBLgBjAG4BLgALALoALgAT
AAIBLgAzAAIBLgArADgBLgA7AEYBLgBDADIBLgBbAGUBQwBrAFMASQCTAIAAYQCbAFMAgwCrAFMA
dQC1AAIAAQADAAMAAAB9AS8AAAD8ATQAAAAgAkIAAgACAAMAAgADAAUAAQAEAAUAAgAFAAcABIAA
AAEAAAD5F0REAAAAAAAA2wMAAAQAAAAAAAAAAAAAAAEAvwAAAAAABAAAAAAAAAAAAAAAAQDIAAAA
AAAMAAAAAAAAAAAAAAAKAAMBAAAAAAwAAAAAAAAAAAAAAAoAEAUAAAAAAAAAAAEAAADTBQAABQAE
AAAAADxNb2R1bGU+AFNUXzdiZTUxODZjOGZjYjQyNjdhYjY2NzJjZWViM2JiZGExLmRsbABSZXNv
dXJjZXMAU1RfOWJlZjZjNGRlYWZiNDI0ZmIwMmFkZmQyOTg3OTdmMmYuY3Nwcm9qLlByb3BlcnRp
ZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF85YmVmNmM0ZGVhZmI0MjRmYjAyYWRmZDI5ODc5N2Yy
Zi5jc3Byb2oAU2NyaXB0UmVzdWx0cwBtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFN5c3RlbS5Db25m
aWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2Ny
aXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFZTVEFSVFNj
cmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VNYW5hZ2Vy
AHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291cmNlQ3Vs
dHVyZQAuY3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAEN1
bHR1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQATWFpbgB2YWx1ZV9fAFN1
Y2Nlc3MARmFpbHVyZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1l
d29ya0F0dHJpYnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFz
c2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRl
AEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1i
bHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlD
dWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5D
b21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAUnVudGltZUNv
bXBhdGliaWxpdHlBdHRyaWJ1dGUAU1RfN2JlNTE4NmM4ZmNiNDI2N2FiNjY3MmNlZWIzYmJkYTEA
U3lzdGVtLkRpYWdub3N0aWNzAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50
aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lz
dGVtLkNvbXBvbmVudE1vZGVsAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2Fi
bGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU1NJU1NjcmlwdFRhc2tF
bnRyeVBvaW50QXR0cmlidXRlAFNjcmlwdE9iamVjdE1vZGVsAGdldF9EdHMATWljcm9zb2Z0LlNx
bFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVmFyaWFi
bGVzAGdldF9WYXJpYWJsZXMAVmFyaWFibGUAZ2V0X0l0ZW0AZ2V0X1ZhbHVlAENvbnZlcnQAVG9C
b29sZWFuAFRvRG91YmxlAFRvSW50MzIAU3lzdGVtLlRocmVhZGluZwBUaHJlYWQAU2xlZXAAc2V0
X1Rhc2tSZXN1bHQAU1RfOWJlZjZjNGRlYWZiNDI0ZmIwMmFkZmQyOTg3OTdmMmYuY3Nwcm9qLlBy
b3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAAAAAf1MAVABfADkAYgBlAGYANgBjADQAZABl
AGEAZgBiADQAMgA0AGYAYgAwADIAYQBkAGYAZAAyADkAOAA3ADkANwBmADIAZgAuAGMAcwBwAHIA
bwBqAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAjVQBzAGUAcgA6
ADoAbgBlAGUAZABUAG8AUwBsAGUAZQBwAAAlVQBzAGUAcgA6ADoAcwBsAGUAZQBwAE0AaQBuAHUA
dABlAHMAAAD4Y6PQRBbXQYjNsjZYCdHNAAi3elxWGTTgiQiJhF3NgIDMkQMGEhUDBhIZAyAAAQQA
ABIVBAAAEhkFAAEBEhkECAASFQQIABIZAwYSDAQAABIMBAgAEgwCBggDBhEUBAAAAAAEAQAAAAQg
AQEOBCABAQgGAAESURFVBCAAElkGIAIBDhJZBAcBEhUFIAEBEWEIAQACAAAAAAADAAABBCAAEm0E
IAAScQUgARJ1HAMgABwEAAECHAQAAQ0cBAABCA0EAAEBCAQHAg0IRwEAGi5ORVRGcmFtZXdvcmss
VmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0LwEA
KlNUXzliZWY2YzRkZWFmYjQyNGZiMDJhZGZkMjk4Nzk3ZjJmLmNzcHJvagAABQEAAAAADQEACHJp
Z2h0LW9uAAAeAQAZQ29weXJpZ2h0IEAgcmlnaHQtb24gMjAxNQAACAEACAAAAAAAHgEAAQBUAhZX
cmFwTm9uRXhjZXB0aW9uVGhyb3dzAQAAAPQuAAAAAAAAAAAAAA4vAAAAIAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAALwAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAABQEAAAAAAAAAAAAABQENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQBERPkXAAABAERE+Rc/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAR0AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABQAwAAAQAwADAA
MAAwADAANABiADAAAAA0AAkAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAHIAaQBnAGgAdAAt
AG8AbgAAAAAAgAArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADkA
YgBlAGYANgBjADQAZABlAGEAZgBiADQAMgA0AGYAYgAwADIAYQBkAGYAZAAyADkAOAA3ADkANwBm
ADIAZgAuAGMAcwBwAHIAbwBqAAAAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEA
LgAwAC4ANgAxADMANwAuADEANwA0ADcANgAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBt
AGUAAABTAFQAXwA3AGIAZQA1ADEAOAA2AGMAOABmAGMAYgA0ADIANgA3AGEAYgA2ADYANwAyAGMA
ZQBlAGIAMwBiAGIAZABhADEALgBkAGwAbAAAAFgAGgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBn
AGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgAHIAaQBnAGgAdAAtAG8AbgAgADIAMAAxADUA
AAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8ANwBiAGUANQAx
ADgANgBjADgAZgBjAGIANAAyADYANwBhAGIANgA2ADcAMgBjAGUAZQBiADMAYgBiAGQAYQAxAC4A
ZABsAGwAAAB4ACsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfADkAYgBlAGYANgBj
ADQAZABlAGEAZgBiADQAMgA0AGYAYgAwADIAYQBkAGYAZAAyADkAOAA3ADkANwBmADIAZgAuAGMA
cwBwAHIAbwBqAAAAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADYAMQAzADcALgAxADcANAA3ADYAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADYAMQAzADcALgAxADcANAA3ADYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAAAgPwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\CHECK FILE EXISTS OR NOT (IF EXISTS THEN IMPORT DATA)\全体パッケージの実行とエラーチェック"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="スクリプト タスク"
          DTS:DTSID="{5F7AA81A-1D22-4675-9F9F-03E35779563E}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="1041"
          DTS:ObjectName="全体パッケージの実行とエラーチェック"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_1859322962114838ad8f52fef57f1263"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::connectionString,User::currentDate,User::filePath,User::mailFromId,User::mailFromName,User::mailServer,System::PackageName,User::packagePath,User::sysDate"
              ReadWriteVariables="User::needToSleep">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_6676d8b7187342a79cc73e50019b7690.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("right-on")]
[assembly: AssemblyProduct("ST_6676d8b7187342a79cc73e50019b7690.csproj")]
[assembly: AssemblyCopyright("Copyright @ right-on 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[using Microsoft.SqlServer.Dts.Runtime;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net.Mail;
using System.Text;
using System.Net;
namespace ST_6676d8b7187342a79cc73e50019b7690.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        // パッケージ実行ステータス管理用
        Dictionary<string, string> dependantPckgSts = new Dictionary<string, string>();

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        public int intExecutedFileCount = 0;    //This variable set in Universally to Maintain How much file originally been executed
                                                //Whether it has ERROR(エラー) or SUCCESS(済).
        public int intFileToBeExecuteCount = 0; //This is DataTable Count to GET 'How Many Packages' came first time for Execution
        #region "Main Method"
        public void Main()
        {
            #region variable declaration and initialisation
            string strConnectionString = Dts.Variables["User::connectionString"].Value.ToString();
            SqlConnection myConnection = new SqlConnection(strConnectionString);
            DataTable DT_PackageAllSel = new DataTable();
            StringBuilder strBuildQry;
            string strQuery = string.Empty;
            StringBuilder strERRQuery = new StringBuilder();
            #endregion variable declaration and initialisation
            try
            {
                _connectionOpen(myConnection);
                strBuildQry = new StringBuilder();
                #region Select Package Details
                //Created On: 29-05-2016
                //Description: This Query will Get All the Packages which are as.
                strBuildQry.Append(" SELECT ");
                strBuildQry.Append(" mst.パッケージコード,mst.パッケージ名, ");
                strBuildQry.Append(" mst.ファイル名,mst.データ検証,mst.業務チェック, ");
                strBuildQry.Append(" mst.完了時間,mst.依存パッケージコード, mst.DONEファイル ");
                strBuildQry.Append(" FROM KANSHI_PKG_TRN_DETAILS trn  ");
                strBuildQry.Append(" JOIN KANSHI_PKG_MST_DETAILS mst  ");
                strBuildQry.Append(" ON mst.パッケージコード=trn.パッケージコード  ");
                strBuildQry.Append(" WHERE mst.削除フラグ='false' AND trn.実行ステータス='未' AND trn.削除フラグ='FALSE' ");
                strBuildQry.Append(" ORDER BY mst.実行順番,mst.依存パッケージコード;");
                strQuery = strBuildQry.ToString();
                DT_PackageAllSel.Reset();
                DT_PackageAllSel = _getDataTable(strQuery, myConnection);
                #endregion
                if (DT_PackageAllSel.Rows.Count > 0)
                {
                    intFileToBeExecuteCount = DT_PackageAllSel.Rows.Count;  //This is DataTable Count to GET 'How Many Packages' came first time for Execution
                    _runPackage(DT_PackageAllSel, myConnection); //実行パッケージ
                }
                else
                {
                    //If all the Packages are already '済' or No packages to be Run.
                    Dts.Variables["User::needToSleep"].Value = false;  //It will break WAIT MODE.
                }
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            #region "CATCH/FINALLY"
            catch (Exception ex)
            {
                try
                {
                strERRQuery.Clear();
                strERRQuery.Append("INSERT INTO ");
                strERRQuery.Append("KANSHI_PACKAGE_ERROR([パッケージコード],[データ日付],[エラー日時],[エラー内容],[エラーフラグ]) ");
                strERRQuery.Append("VALUES('S999','" + Dts.Variables["User::currentDate"].Value.ToString() + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','システムエラー:" + ex.Message.Replace("'", "-") + "','2');");
                _updateInsert(strERRQuery.ToString(), myConnection);
                }
                catch (Exception sqlException)
                {
                    _Logging(Dts.Variables["User::filePath"].Value.ToString(),string.Empty, ex.Message, sqlException.Message);
                }
            }
            finally
            {
                _connectionClose(myConnection);
                DT_PackageAllSel = null;
                strBuildQry = null;
                strQuery = null;
                strERRQuery = null;
            }
            #endregion
        }
        #endregion

        #region "Run of Packages"
        /// <summary>
        /// 作成人: イルファンマンスリー
        /// 説明: 
        /// </summary>
        /// <param name="DT_PackageAllSel"></param>
        protected void _runPackage(DataTable DT_PackageAllSel, SqlConnection myConnection)
        {
            #region Variable Declaration
            string strFilePath = Dts.Variables["User::filePath"].Value.ToString();  //ファイルパス。
            string strPackagePath = Dts.Variables["User::packagePath"].Value.ToString();    //パッケージパス。
            DateTime dtCurDate = Convert.ToDateTime(Dts.Variables["User::currentDate"].Value);
            StringBuilder strERRQuery = new StringBuilder();
            string[] strArrDepenPack;
            DataTable dtTemp = new DataTable();
            string strCurrentTime;
            string strEndTime;
            string strPackageId = string.Empty;
            string strPackageName;
            string strFlatFileName;
            string strDependentPackage;
            string strFullFileName;
            bool boolDataCheckFlag;
            bool boolBusinessDataCheckFlag;
            bool boolDoneFileCheckFlag;
            bool boolExecuteCheckFlag;
            bool boolErrorCheckErr = true;
            string strErrorPackagePath; //ERROR Check Package. データ検証 flag is '1'.
            Application app;
            Package packageRun;
            
            #endregion
            try
            {
                _connectionOpen(myConnection);
                #region Run Actual Flow Packages
                for (int intI = 0; intI <= DT_PackageAllSel.Rows.Count - 1; intI++)
                {
                    //initialising time and pakg_id variables
                    strCurrentTime = DateTime.Now.ToString("HH:mm");
                    strEndTime = DT_PackageAllSel.Rows[intI]["完了時間"].ToString();
                    strPackageId = DT_PackageAllSel.Rows[intI]["パッケージコード"].ToString();
                    strPackageName = DT_PackageAllSel.Rows[intI]["パッケージ名"].ToString();
                    strFlatFileName = DT_PackageAllSel.Rows[intI]["ファイル名"].ToString();
                    strDependentPackage = DT_PackageAllSel.Rows[intI]["依存パッケージコード"].ToString();
                    boolDoneFileCheckFlag = Convert.ToBoolean(DT_PackageAllSel.Rows[intI]["DONEファイル"]);
                    boolDataCheckFlag = Convert.ToBoolean(DT_PackageAllSel.Rows[intI]["データ検証"]);    //ERROR Check Package need to run or not. When FLAT_file not needed to check STEP①.
                    boolBusinessDataCheckFlag = Convert.ToBoolean(DT_PackageAllSel.Rows[intI]["業務チェック"]);   //ERROR Check Business Checking needed or not. STEP②.
                    strFullFileName = strFilePath + @"\" + strFlatFileName + "_" + dtCurDate.ToString("yyyyMMdd") + "_DONE";  //GET _DONE file path without extension to check.

                    // CHECK PCK STATUS
                    if (dependantPckgSts.ContainsKey(strPackageId))
                    {
                        if (dependantPckgSts[strPackageId].ToString() == "済")
                        {
                            continue;
                        }
                    }

                    #region _DONE file needed
                    if (boolDoneFileCheckFlag == true)
                    {
                        #region WHEN '_DONE' FILE EXISTS
                        if (File.Exists(strFullFileName))
                        {
                            #region ERROR CHECK PACKAGE
                            //Run JUSHIN_ERROR Check package in each condition
                            //Except its check flag is FALSE.
                            if (boolDataCheckFlag == true)
                            {
                                app = new Application();
                                strErrorPackagePath = strPackagePath + @"\999_JUSHIN_ERROR_CHECK.dtsx";
                                MyEventListener eventListener = new MyEventListener();
                                strFullFileName = strFlatFileName + "_" + dtCurDate.ToString("yyyyMMdd");
                                packageRun = app.LoadPackage(strErrorPackagePath, eventListener);
                                //
                                packageRun.Variables["packageCode"].Value = strPackageId;
                                packageRun.Variables["connectionString"].Value = Dts.Variables["User::connectionString"].Value.ToString();
                                packageRun.Variables["currentDate"].Value = Dts.Variables["User::currentDate"].Value.ToString();
                                packageRun.Variables["fileFolder"].Value = Dts.Variables["User::filePath"].Value.ToString();
                                packageRun.Variables["fileName"].Value = strFlatFileName;

                                //Execute ERROR Check package
                                DTSExecResult results_err = packageRun.Execute(null, null, eventListener, null, null);
                                if (results_err == DTSExecResult.Failure)
                                {
                                    boolErrorCheckErr = false;
                                    strERRQuery.Clear();
                                    strERRQuery.Append("UPDATE KANSHI_PKG_TRN_DETAILS ");
                                    strERRQuery.Append("SET 実行ステータス='エラー', エラー日=GETDATE() ");
                                    strERRQuery.Append("WHERE パッケージコード='" + strPackageId + "' AND 削除フラグ='false' ");
                                    _updateInsert(strERRQuery.ToString(), myConnection);  //Update Function Call
                                    strERRQuery.Clear();
                                    dtTemp.Reset();
                                    strERRQuery.Append("SELECT * ");
                                    strERRQuery.Append(" FROM KANSHI_PACKAGE_ERROR ");
                                    strERRQuery.Append(" WHERE パッケージコード='" + strPackageId + "' AND データ日付='" + dtCurDate + "';");
                                    dtTemp = _getDataTable(strERRQuery.ToString(), myConnection);
                                    if (dtTemp.Rows.Count == 0)
                                    {
                                        //IF ERROR for SAME file is not inserted then Only Write New row.
                                        strERRQuery.Clear();
                                        strERRQuery.Append(" INSERT INTO KANSHI_PACKAGE_ERROR ");
                                        strERRQuery.Append(" (パッケージコード,データ日付,エラー日時,ファイル名,エラー内容,エラーフラグ) ");
                                        strERRQuery.Append(" VALUES('" + strPackageId + "','" + dtCurDate + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','" + strFullFileName + "','エラーパッケージでエラーが発生しました。','2');");
                                        _updateInsert(strERRQuery.ToString(), myConnection);  //Call Insert FUNCTION
                                    }
                                }
                            }
                            #endregion
                            if (boolErrorCheckErr == true)
                            {
                                #region Package Found Dependency
                                if (!string.IsNullOrEmpty(strDependentPackage))
                                {
                                    boolExecuteCheckFlag = true;     // Dependant Pacakge Run Status Flg
                                    //If Package is Dependent on Another
                                    string strPackStatus;
                                    string strQuery;
                                    strArrDepenPack = strDependentPackage.Split(',');
                                    for (int intJ = 0; intJ < strArrDepenPack.Length; intJ++)
                                    {
                                        strPackStatus = string.Empty;
                                        strQuery = string.Empty;
                                        strQuery = "SELECT 実行ステータス FROM KANSHI_PKG_TRN_DETAILS WHERE 削除フラグ='false' AND パッケージコード='" + strArrDepenPack[intJ] + "';";
                                        dtTemp.Reset();
                                        dtTemp = _getDataTable(strQuery, myConnection);
                                        strPackStatus = dtTemp.Rows[0]["実行ステータス"].ToString();
                                        if (strPackStatus == "未")   //Package status is "Not Yet Execute"
                                        {
                                            dtTemp.Reset();
                                            strQuery = string.Empty;
                                            strQuery = "SELECT  mst.パッケージコード,mst.パッケージ名,  mst.ファイル名,mst.データ検証,mst.業務チェック,  mst.完了時間,mst.依存パッケージコード, mst.DONEファイル ";
                                            strQuery = strQuery + "FROM KANSHI_PKG_TRN_DETAILS trn   JOIN KANSHI_PKG_MST_DETAILS mst ON mst.パッケージコード=trn.パッケージコード  ";
                                            strQuery = strQuery + "WHERE mst.削除フラグ='false' AND trn.実行ステータス='未'  AND mst.パッケージコード = '" + strArrDepenPack[intJ] + "' ";
                                            strQuery = strQuery + "ORDER BY mst.実行順番,mst.依存パッケージコード;";
                                            dtTemp = _getDataTable(strQuery, myConnection);
                                            //Recursive Function.
                                            _runPackage(dtTemp, myConnection);
                                            dtTemp.Reset();
                                            strQuery = string.Empty;
                                            strQuery = "SELECT 実行ステータス FROM KANSHI_PKG_TRN_DETAILS WHERE 削除フラグ='false' AND パッケージコード='" + strArrDepenPack[intJ] + "';";
                                            dtTemp = _getDataTable(strQuery, myConnection);
                                            strPackStatus = dtTemp.Rows[0]["実行ステータス"].ToString();
                                            if (strPackStatus != "済")
                                            {
                                                boolExecuteCheckFlag = false;
                                                break;
                                            }
                                            else
                                            {
                                                dependantPckgSts.Add(strArrDepenPack[intJ], "済");
                                            }
                                        }
                                        else if (strPackStatus == "エラー")
                                        {
                                            boolExecuteCheckFlag = false;
                                            break;
                                        }
                                    }
                                    //Start: Run GYOM_Check & GYOM Package for current Package
                                    if (boolExecuteCheckFlag == true)
                                    {
                                        _runGyoumuPackage(strPackageId, strPackageName, strFlatFileName, boolDataCheckFlag, boolBusinessDataCheckFlag, strFlatFileName, myConnection);
                                    }
                                    //End: Run GYOM_Check & GYOM Package for current Package        
                                }
                                #endregion

                                #region Package Find No Dependency.
                                //If the Current Package Do not have its Parent Dependent package.
                                else
                                {
                                    //Actual Run ERROR Check & GYOUMU Package.
                                    _runGyoumuPackage(strPackageId, strPackageName, strFlatFileName, boolDataCheckFlag, boolBusinessDataCheckFlag, strFlatFileName,myConnection);
                                }
                                #endregion
                            }
                            if (intExecutedFileCount == intFileToBeExecuteCount)
                            {
                                Dts.Variables["User::needToSleep"].Value = false;  //It will break WAIT MODE.
                                break;   //This will stop Execution of FOR LOOP
                            }
                            else
                            {
                                Dts.Variables["User::needToSleep"].Value = true;  //It will be in WAIT MODE for Defined Minute.
                            }
                        }
                        #endregion
                        #region WHEN '_DONE' FILE DO NOT EXISTS
                        else
                        {
                            if (strCurrentTime.CompareTo(strEndTime) >= 0) //WHEN TIME's UP.
                            {
                                dtTemp.Reset();
                                strERRQuery.Clear();
                                strERRQuery.Append("SELECT * ");
                                strERRQuery.Append(" FROM KANSHI_PACKAGE_ERROR ");
                                strERRQuery.Append(" WHERE パッケージコード='" + strPackageId + "' AND データ日付='" + dtCurDate + "';");
                                dtTemp = _getDataTable(strERRQuery.ToString(),myConnection);
                                if (dtTemp.Rows.Count == 0)
                                {
                                    //IF ERROR for SAME file is not inserted then Only Write New row.
                                    strERRQuery.Clear();
                                    strERRQuery.Append(" INSERT INTO KANSHI_PACKAGE_ERROR ");
                                    strERRQuery.Append(" (パッケージコード,データ日付,エラー日時,ファイル名,エラー内容,エラーフラグ) ");
                                    strERRQuery.Append(" VALUES('" + strPackageId + "','" + dtCurDate + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','" + Path.GetFileName(strFullFileName) + "','DONEファイルが見つかりません。','2');");
                                    _updateInsert(strERRQuery.ToString(), myConnection);  //Call Insert FUNCTION
                                    strERRQuery.Clear();
                                    strERRQuery.Append(" UPDATE KANSHI_PKG_TRN_DETAILS ");
                                    strERRQuery.Append(" SET 実行ステータス='エラー' ");
                                    strERRQuery.Append(" WHERE パッケージコード='" + strPackageId + "' AND インポート日='" + dtCurDate + "' AND 削除フラグ='FALSE'; ");
                                    _updateInsert(strERRQuery.ToString(), myConnection);  //Call Update FUNCTION
                                    _Logging(Dts.Variables["User::filePath"].Value.ToString(), strPackageName.Substring(4, strPackageName.Length - 4), "DONEファイルが見つかりません。", string.Empty);
                                    _sendMail(strPackageName.Substring(4, strPackageName.Length - 9), strPackageId, dtCurDate, Convert.ToString(Dts.Variables["User::filePath"].Value).Replace(@"receive\data", "Error"), myConnection);
                                }
                                //This count is to Stop waiting for this Package. Because waiting Logic is dependent on same count
                                intExecutedFileCount = intExecutedFileCount + 1;
                            }
                            else
                            {
                                Dts.Variables["User::needToSleep"].Value = true;  //It will be in WAIT MODE for Defined Minute.
                            }
                        }
                        #endregion
                    }
                    #endregion
                    #region _DONE file not needed
                    else
                    {
                        #region Package Found Dependency
                        if (!string.IsNullOrEmpty(strDependentPackage))
                        {
                            boolExecuteCheckFlag = true;     // Dependant Pacakge Run Status Flg
                            //If Package is Dependent on Another
                            strArrDepenPack = strDependentPackage.Split(',');
                            string strPackStatus;
                            string strQuery;
                            for (int intJ = 0; intJ < strArrDepenPack.Length; intJ++)
                            {
                                strPackStatus = string.Empty;
                                strQuery = string.Empty;
                                strQuery = "SELECT 実行ステータス FROM KANSHI_PKG_TRN_DETAILS WHERE 削除フラグ='false' AND パッケージコード='" + strArrDepenPack[intJ] + "';";
                                dtTemp.Reset();
                                dtTemp = _getDataTable(strQuery, myConnection);
                                strPackStatus = dtTemp.Rows[0]["実行ステータス"].ToString();
                                if (strPackStatus == "未")   //Package status is "Not Yet Execute"
                                {
                                    dtTemp.Reset();
                                    strQuery = string.Empty;
                                    strQuery = "SELECT  mst.パッケージコード,mst.パッケージ名,  mst.ファイル名,mst.データ検証,mst.業務チェック,  mst.完了時間,mst.依存パッケージコード, mst.DONEファイル ";
                                    strQuery = strQuery + "FROM KANSHI_PKG_TRN_DETAILS trn   JOIN KANSHI_PKG_MST_DETAILS mst ON mst.パッケージコード=trn.パッケージコード  ";
                                    strQuery = strQuery + "WHERE mst.削除フラグ='false' AND trn.実行ステータス='未'  AND mst.パッケージコード = '" + strArrDepenPack[intJ] + "' ";
                                    strQuery = strQuery + "ORDER BY mst.実行順番,mst.依存パッケージコード;";
                                    dtTemp = _getDataTable(strQuery, myConnection);
                                    //Recursive Function.
                                    _runPackage(dtTemp, myConnection);
                                    dtTemp.Reset();
                                    strQuery = string.Empty;
                                    strQuery = "SELECT 実行ステータス FROM KANSHI_PKG_TRN_DETAILS WHERE 削除フラグ='false' AND パッケージコード='" + strArrDepenPack[intJ] + "';";
                                    dtTemp = _getDataTable(strQuery, myConnection);
                                    strPackStatus = dtTemp.Rows[0]["実行ステータス"].ToString();
                                    if (strPackStatus != "済")
                                    {
                                        boolExecuteCheckFlag = false;
                                        break;
                                    }
                                    else
                                    {
                                        dependantPckgSts.Add(strArrDepenPack[intJ], "済");
                                    }
                                }
                                else if(strPackStatus == "エラー")
                                {
                                    //This count is to Stop waiting for this Package. Because waiting Logic is dependent on same count
                                    intExecutedFileCount = intExecutedFileCount + 1;

                                    boolExecuteCheckFlag = false;
                                    break;
                                }
                            }
                            //Start: Run GYOM_Check & GYOM Package for current Package
                            if (boolExecuteCheckFlag == true)
                            {
                                _runGyoumuPackage(strPackageId, strPackageName, strFlatFileName, boolDataCheckFlag, boolBusinessDataCheckFlag, strFlatFileName, myConnection);
                            }
                            //End: Run GYOM_Check & GYOM Package for current Package 
                        }
                        #endregion
                        #region Package Find No Dependency.
                        //If the Current Package Do not have its Parent Dependent package.
                        else
                        {
                            //Actual Run ERROR Check & GYOUMU Package.
                            _runGyoumuPackage(strPackageId, strPackageName, strFlatFileName, boolDataCheckFlag, boolBusinessDataCheckFlag, strFlatFileName, myConnection);
                        }
                        #endregion

                        if (intExecutedFileCount == intFileToBeExecuteCount)
                        {
                            Dts.Variables["User::needToSleep"].Value = false;  //It will break WAIT MODE.
                            break;   //This will stop Execution of FOR LOOP
                        }
                        else
                        {
                            Dts.Variables["User::needToSleep"].Value = true;  //It will be in WAIT MODE for Defined Minute.
                        }
                    }
                    #endregion
                    strCurrentTime = string.Empty;
                    strEndTime = string.Empty;
                    strPackageId = string.Empty;
                    strPackageName = string.Empty;
                    strFlatFileName = string.Empty;
                    strDependentPackage = string.Empty;
                    strFullFileName = string.Empty;
                }
                #endregion
            }
            #region CATCH/FINALLY
            catch (Exception ex)
            {
                try
                {
                strERRQuery.Clear();
                strERRQuery.Append("INSERT INTO ");
                strERRQuery.Append("KANSHI_PACKAGE_ERROR([パッケージコード],[データ日付],[エラー日時],[エラー内容],[エラーフラグ]) ");
                strERRQuery.Append("VALUES('S" + strPackageId + "','" + Dts.Variables["User::currentDate"].Value.ToString() + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','システムエラー:" + ex.Message.Replace("'", "-") + "','2');");
                _updateInsert(strERRQuery.ToString(), myConnection);
                }
                catch (Exception sqlException)
                {
                    _Logging(Dts.Variables["User::filePath"].Value.ToString(),string.Empty, ex.Message, sqlException.Message);
                }
            }
            finally
            {
                strPackageName = null;
                strFilePath = null;
                strPackagePath = null;
                strERRQuery = null;
                DT_PackageAllSel = null;
                dtTemp = null;
                strCurrentTime = null;
                strEndTime = null;
                strPackageId = null;
                strFlatFileName = null;
                strDependentPackage = null;
                strFullFileName = null;
            }
            #endregion
        }
        #endregion

        #region "GYOMU Check & GYOUMU Package"
        //作成人: Irfan Mansuri
        //作成日付: 2016-06-23
        //説明: This Function will change the package status before execution as 実行中 
        //      & after the execution set package status as 済｜エラー.
        //      Between that ERROR Check & Actual 業務 package will be execute.
        protected void _runGyoumuPackage(string strPackageId, string strGyomPackageName, string strFlatFileName, bool boolErrorCheckFlag, bool boolBusinessDataCheckFlag, string strGyomName, SqlConnection myConnection)
        {
            string strFilePath = Dts.Variables["User::filePath"].Value.ToString();  //ファイルパス。
            string strPackageFolder = Dts.Variables["User::packagePath"].Value.ToString();    //パッケージパス。
            DateTime dtCurDate = Convert.ToDateTime(Dts.Variables["User::currentDate"].Value.ToString());
            string strFullFileName = strFlatFileName + "_" + dtCurDate.ToString("yyyyMMdd");
            string strGyomCheckPackageName;  //GYOUMU Data Check Package. 業務チェック flag is '1'.
            StringBuilder strERRQuery = new StringBuilder();
            Application app;
            Package packageRun;
            DataTable dtTemp;
            try
            {
                _connectionOpen(myConnection);
                dtTemp = new DataTable();
                //Start: Update Package status as 実行中
                strERRQuery.Clear();
                strERRQuery.Append("UPDATE KANSHI_PKG_TRN_DETAILS ");
                strERRQuery.Append("SET 実行ステータス='実行中', 開始時間=GETDATE(), インポート日='" + dtCurDate + "' ");
                strERRQuery.Append("WHERE パッケージコード='" + strPackageId + "' AND 実行ステータス='未' AND 削除フラグ='false'; ");
                _updateInsert(strERRQuery.ToString(), myConnection);  //Update Function Call
                //End: Update Package status as 実行中
                app = new Application();
                MyEventListener eventListener = new MyEventListener();
                strGyomCheckPackageName = "999_GYOUMU_CHECK.dtsx";
                #region "No Flat File/No ErrorCheck Package"
                if (boolBusinessDataCheckFlag == true)  //業務チェック flag Check.
                {
                    //GYOUMU CHECK PAckage RUN
                    //This function Call will handle Its Actual GYOUMU Package as well.
                    _runGyoumuCheck(strPackageId, strGyomCheckPackageName, strGyomPackageName, strPackageFolder, strGyomName, myConnection);
                }
                else
                {
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    intExecutedFileCount = intExecutedFileCount + 1;    //Increase count from All the file which are executed.///
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    #region run gyoumu_pkg
                    strGyomPackageName = strPackageFolder + @"\" + strGyomPackageName;
                    if (File.Exists(strGyomPackageName))
                    {
                        eventListener = null;
                        app = null;
                        eventListener = new MyEventListener();
                        app = new Application();
                        packageRun = app.LoadPackage(strGyomPackageName, eventListener);
                        DTSExecResult results;
                        try
                        {
                            packageRun.Variables["connectionString"].Value = Dts.Variables["User::connectionString"].Value.ToString();
                            results = packageRun.Execute(null, null, eventListener, null, null);
                        }
                        catch (Exception)
                        {
                            results = packageRun.Execute(null, null, eventListener, null, null);
                        }
                        if (results == DTSExecResult.Failure)
                        {
                            //When Any ERROR Occur in 業務 package.
                            strERRQuery.Clear();
                            strERRQuery.Append("UPDATE KANSHI_PKG_TRN_DETAILS ");
                            strERRQuery.Append("SET 実行ステータス='エラー', エラー日=GETDATE()");
                            strERRQuery.Append("WHERE パッケージコード='" + strPackageId + "' AND 削除フラグ='false';");
                            _updateInsert(strERRQuery.ToString(), myConnection);  //Call Update function.
                            //Insert into PACKAGE ERROR table
                            strERRQuery.Clear();
                            strERRQuery.Append(" INSERT INTO KANSHI_PACKAGE_ERROR ");
                            strERRQuery.Append(" (パッケージコード,データ日付,エラー日時,エラー内容,エラーフラグ) ");
                            strERRQuery.Append(" VALUES('" + strPackageId + "','" + dtCurDate + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','" + eventListener.errDescription.Replace("'", "-") + "。','2');");
                            _updateInsert(strERRQuery.ToString(), myConnection);  //Call Insert FUNCTION
                            try
                            {
                                //Write the Error Log in text
                                //_Logging(Dts.Variables["User::filePath"].Value.ToString(),Path.GetFileName(strGyomPackageName), eventListener.errDescription, string.Empty);
                                _Logging(Dts.Variables["User::filePath"].Value.ToString(), Path.GetFileName(strGyomPackageName).Substring(4, Path.GetFileName(strGyomPackageName).Length - 9), eventListener.errDescription.Replace("'", "-"), string.Empty);
                                //Send mail to report 業務パッケージ failure
                                _sendMail(Path.GetFileName(strGyomPackageName).Substring(4, Path.GetFileName(strGyomPackageName).Length - 9), strPackageId, dtCurDate, Convert.ToString(Dts.Variables["User::filePath"].Value).Replace(@"receive\data", "Error"), myConnection);
                            }
                            catch
                            {
                                //Nothing to Do.. Just Skip it, because log is already written in Db Table.
                                //There are just Mail log in text and mail, which should not be allowed to stop other packages execution.
                                //So better it make its catch so it cant affect its normal flow.
                            }
                        }
                        else
                        {
                            //When 業務 package executed successfully.
                            strERRQuery.Clear();
                            strERRQuery.Append("UPDATE KANSHI_PKG_TRN_DETAILS ");
                            strERRQuery.Append("SET 実行ステータス='済', 終了時間=GETDATE()");
                            strERRQuery.Append("WHERE パッケージコード='" + strPackageId + "' AND 削除フラグ='false';");
                            _updateInsert(strERRQuery.ToString(), myConnection);  //Call Update function.
                        }
                    }
                    else
                    {
                        //業務パッケージが見つかりませんでしたの場合。
                        strERRQuery.Clear();
                        strERRQuery.Append("INSERT INTO ");
                        strERRQuery.Append("KANSHI_PACKAGE_ERROR([パッケージコード],[データ日付],[エラー日時],[エラー内容],[エラーフラグ]) ");
                        strERRQuery.Append("VALUES('S" + strPackageId + "','" + Dts.Variables["User::currentDate"].Value.ToString() + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','" + eventListener.errDescription.Replace("'", "-") + "。','2');");
                        _updateInsert(strERRQuery.ToString(), myConnection);
                    }
                    #endregion
                }
                #endregion
            }
            #region CATCH/FINALLY
            catch (Exception ex)
            {
                try
                {
                    strERRQuery.Clear();
                    strERRQuery.Append("INSERT INTO ");
                    strERRQuery.Append("KANSHI_PACKAGE_ERROR([パッケージコード],[データ日付],[エラー日時],[エラー内容],[エラーフラグ]) ");
                    strERRQuery.Append("VALUES('S" + strPackageId + "','" + Dts.Variables["User::currentDate"].Value.ToString() + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','システムエラー:" + ex.Message.Replace("'", "-") + "','2');");
                    _updateInsert(strERRQuery.ToString(), myConnection);
                }
                catch (Exception sqlException)
                {
                    _Logging(Dts.Variables["User::filePath"].Value.ToString(),string.Empty, ex.Message, sqlException.Message);
                }
            }
            finally
            {
                strPackageId = null;
                strGyomPackageName = null;
                strFlatFileName = null;
                app = null;
                packageRun = null;
                strERRQuery = null;
                strFilePath = null;
                strPackageFolder = null;
                strGyomCheckPackageName = null;
            }
            #endregion
        }
        #endregion

        #region "Run GYOUMU CHECK Package"
        /// <summary>
        /// 作成人: イルファンマンスリー
        /// 説明: This Will run the Gyoumu check Package(ERROR Check Step②) & Actual Gyoumu Package.
        /// 作成日: 2016-07-15
        /// </summary>
        /// <arg 1> strGyomCheckPackageName = GYOM Check package name only.
        /// <arg 2> strGyomPackageName = Actual GYOM Package name only.
        /// <arg 3> strPackageFolder = Folder name without last SLASH(\), where All the packages saved.
        /// <arg 4> strGyomName = For which GYOM current package will be run. e.g: T_DAY_TENKAN_IDO. Where is actual the MAIN table name as well.
        private void _runGyoumuCheck(string strPackageId, string strGyomCheckPackageName, string strGyomPackageName, string strPackageFolder, string strGyomName, SqlConnection myConnection)
        {
            StringBuilder strERRQuery = new StringBuilder();
            Application app;
            Package packageRun;
            string strGyomCheckFullPath = strPackageFolder + @"\" + strGyomCheckPackageName;    //GYOM Check Package & full path
            string strGyomFullPath = strPackageFolder + @"\" + strGyomPackageName;  //Actual GYOM Package & full path
            MyEventListener eventListener = new MyEventListener();
            try
            {
                _connectionOpen(myConnection);
                app = new Application();
                #region Run GYOM Check Package
                packageRun = app.LoadPackage(strGyomCheckFullPath, eventListener);
                packageRun.Variables["checkType"].Value = strGyomName;
                packageRun.Variables["connectionString"].Value = Dts.Variables["User::connectionString"].Value.ToString();
                packageRun.Variables["currentDate"].Value = Convert.ToDateTime(Dts.Variables["User::currentDate"].Value);
                packageRun.Variables["packageCode"].Value = strPackageId;
                //Execute GYOM Check package
                DTSExecResult results_err = packageRun.Execute(null, null, eventListener, null, null);
                if (results_err == DTSExecResult.Failure)
                {
                    //This will be FAIL Only when any System ERROR Occurs.
                    //When Any ERROR Occur in 業務 package.

                    strERRQuery.Clear();
                    strERRQuery.Append("UPDATE KANSHI_PKG_TRN_DETAILS ");
                    strERRQuery.Append("SET 実行ステータス='エラー', エラー日=GETDATE()");
                    strERRQuery.Append("WHERE パッケージコード='" + strPackageId + "' AND 削除フラグ='false';");
                    _updateInsert(strERRQuery.ToString(), myConnection);  //Call Update function.
                    strERRQuery.Clear();
                    strERRQuery.Append("INSERT INTO ");
                    strERRQuery.Append("KANSHI_PACKAGE_ERROR([パッケージコード],[データ日付],[エラー日時],[エラー内容],[エラーフラグ]) ");
                    strERRQuery.Append("VALUES('S" + strPackageId + "','" + Dts.Variables["User::currentDate"].Value.ToString() + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','"+eventListener.errDescription+"。','2');");
                    _updateInsert(strERRQuery.ToString(), myConnection);
                }
                #endregion
                #region Run GYOM Package 
                else
                {
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    intExecutedFileCount = intExecutedFileCount + 1;    //Increase count from All the file which are executed.///
                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //If no ERROR(System Error) then RUN its GYOM Package to be Data Import.
                    app = null;
                    packageRun = null;
                    app = new Application();
                    if (File.Exists(strGyomFullPath))
                    {
                        packageRun = app.LoadPackage(strGyomFullPath, eventListener);
                        DTSExecResult result_err1;
                        try
                        {
                            packageRun.Variables["connectionString"].Value = Dts.Variables["User::connectionString"].Value.ToString();
                            result_err1 = packageRun.Execute(null, null, eventListener, null, null);
                        }
                        catch (Exception)
                        {
                            result_err1 = packageRun.Execute(null, null, eventListener, null, null);
                        }
                        if (result_err1 == DTSExecResult.Failure)
                        {
                            //When Any ERROR Occur in 業務 package.
                            strERRQuery.Clear();
                            strERRQuery.Append("UPDATE KANSHI_PKG_TRN_DETAILS ");
                            strERRQuery.Append("SET 実行ステータス='エラー', エラー日=GETDATE()");
                            strERRQuery.Append("WHERE パッケージコード='" + strPackageId + "' AND 削除フラグ='false';");
                            _updateInsert(strERRQuery.ToString(), myConnection);  //Call Update function.
                            //If GYOM Package throw any System ERROR.
                            strERRQuery.Clear();
                            strERRQuery.Append("INSERT INTO KANSHI_PACKAGE_ERROR");
                            strERRQuery.Append("([パッケージコード],[データ日付],[エラー日時],[エラー内容],[エラーフラグ]) ");
                            strERRQuery.Append("VALUES('S" + strPackageId + "','" + Dts.Variables["User::currentDate"].Value.ToString() + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','" + eventListener.errDescription + "。','2');");
                            _updateInsert(strERRQuery.ToString(), myConnection);
                            //Write the Error Log in text
                            try
                            {
                                _Logging(Dts.Variables["User::filePath"].Value.ToString(), strGyomPackageName.Substring(4, strGyomPackageName.Length - 9), eventListener.errDescription, string.Empty);
                                //Send mail to report 業務パッケージ failure
                                _sendMail(strGyomPackageName.Substring(4, strGyomPackageName.Length - 9), strPackageId, Convert.ToDateTime(Dts.Variables["User::currentDate"].Value), Dts.Variables["User::filePath"].Value.ToString().Replace(@"receive\data", "Error"), myConnection);
                            }
                            catch
                            {
                                //Nothing to Do.. Just Skip it, because log is already written in Db Table.
                                //There are just Mail log in text and mail, which should not be allowed to stop other packages execution.
                                //So better it make its catch so it cant affect its normal flow.
                            }
                        }
                        else
                        {
                            //Update Success Status as '済'
                            strERRQuery.Clear();
                            strERRQuery.Append("UPDATE KANSHI_PKG_TRN_DETAILS ");
                            strERRQuery.Append("SET 実行ステータス='済', 終了時間=GETDATE()");
                            strERRQuery.Append("WHERE パッケージコード='" + strPackageId + "' AND 削除フラグ='false';");
                            _updateInsert(strERRQuery.ToString(), myConnection);  //Call Update function.
                        }
                    }
                    else
                    {
                        strERRQuery.Clear();
                        strERRQuery.Append("INSERT INTO ");
                        strERRQuery.Append("KANSHI_PACKAGE_ERROR([パッケージコード],[データ日付],[エラー日時],[エラー内容],[エラーフラグ]) ");
                        strERRQuery.Append("VALUES('S" + strPackageId + "','" + Dts.Variables["User::currentDate"].Value.ToString() + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','" + eventListener.errDescription + "。','2');");
                        _updateInsert(strERRQuery.ToString(), myConnection);
                    }
                }
                #endregion
            }
            #region CATCH/FINALLY
            catch (Exception ex)
            {
                try
                {
                    strERRQuery.Clear();
                    strERRQuery.Append("INSERT INTO ");
                    strERRQuery.Append("KANSHI_PACKAGE_ERROR([パッケージコード],[データ日付],[エラー日時],[エラー内容],[エラーフラグ]) ");
                    strERRQuery.Append("VALUES('S" + strPackageId + "','" + Dts.Variables["User::currentDate"].Value.ToString() + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','システムエラー:" + ex.Message.Replace("'", "-") + "','2');");
                    _updateInsert(strERRQuery.ToString(), myConnection);
                }
                catch (Exception sqlException)
                {
                    _Logging(Dts.Variables["User::filePath"].Value.ToString(),string.Empty, ex.Message, sqlException.Message);
                }
                
            }
            finally
            {
                strGyomCheckPackageName = null;
                strGyomPackageName = null;
                strPackageFolder = null;
                strGyomName = null;
                strERRQuery = null;
                app = null;
                packageRun = null;
                strGyomCheckFullPath = null;
                strGyomFullPath = null;
                eventListener = null;
            }
            #endregion
        }
        #endregion

        #region "Get DataTable"
        //Created On: 19-05-2016
        //Description: Aim to Return DataTable from the Query.
        public DataTable _getDataTable(string strQuery, SqlConnection myConnection)
        {
            StringBuilder strERRQuery = new StringBuilder();
            DataTable objDT = new DataTable();
            SqlCommand myCommand;
            SqlDataAdapter sqlSelectData;
            try
            {
                _connectionOpen(myConnection);
                myCommand = new SqlCommand(strQuery, myConnection);
                myCommand.CommandType = CommandType.Text;
                sqlSelectData = new SqlDataAdapter();
                sqlSelectData.SelectCommand = myCommand;
                sqlSelectData.Fill(objDT);
            }
            catch (Exception ex)
            {
                try
                {
                    strERRQuery.Clear();
                    strERRQuery.Append("INSERT INTO ");
                    strERRQuery.Append("KANSHI_PACKAGE_ERROR([パッケージコード],[データ日付],[エラー日時],[エラー内容],[エラーフラグ]) ");
                    strERRQuery.Append("VALUES('S999','" + Dts.Variables["User::currentDate"].Value.ToString() + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','システムエラー:" + ex.Message.Replace("'", "-") + "','2');");
                    _updateInsert(strERRQuery.ToString(), myConnection);
                }
                catch (Exception sqlException)
                {
                    _Logging(Dts.Variables["User::filePath"].Value.ToString(),string.Empty, ex.Message, sqlException.Message);
                }
            }
            finally
            {
                myConnection = null;
                strQuery = null;
                myCommand = null;
                sqlSelectData = null;
                strERRQuery = null;
            }
            return objDT;
        }
        #endregion

        #region "Update/Insert Query in Db"
        protected void _updateInsert(string strQuery, SqlConnection myConnection)
        {
            StringBuilder strERRQuery = new StringBuilder();
            SqlCommand myCommand;
            try
            {
                myCommand = new SqlCommand(strQuery, myConnection);
                _connectionOpen(myConnection);
                myCommand.ExecuteNonQuery();
            }
            #region CATCH/FINALLY
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                strERRQuery = null;
                myConnection = null;
                myCommand = null;
            }
            #endregion
        }
        #endregion

        #region "Logging"
        /// <summary>
        /// 説明: This function writes Log in Text file log in specified folder.
        /// 作成日: 2016/10/19
        /// </summary>
        /// <param name="strFilePath">Where TSV files belongs</param>
        /// <param name="strErrorMsg">Error message that we want to insert</param>
        /// <param name="strExceptionMsg">Exception if occured in CATCH blog.</param>
        public void _Logging(string strFilePath, string strGyomPackageName,　string strErrorMsg, string strExceptionMsg)
        {
            string strLogFolder = strFilePath.Replace(@"receive\data", "Error");
            string strLogPath = string.Empty;
            if (string.IsNullOrEmpty(strGyomPackageName))
            {
                strLogPath = strLogFolder + @"\PACKAGE_" + Dts.Variables["System::PackageName"].Value.ToString().Replace(".dtsx", "_") + "_" + DateTime.Now.ToString("yyyyMMdd") + ".log";
            }
            else
            {
                strLogPath = strLogFolder + @"\PACKAGE_" + strGyomPackageName.Replace(".dtsx", "") + "_" + DateTime.Now.ToString("yyyyMMdd") + ".log";
            }
            StreamWriter stream = null;
            try
            {
                if (!File.Exists(strLogPath))
                {
                    File.Create(strLogPath).Close();
                }
                stream = new StreamWriter(strLogPath, true);
                stream.WriteLine(DateTime.Now + "\t" + strErrorMsg + "\n" + DateTime.Now + "\t" + strExceptionMsg);
            }
            catch (Exception)
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            finally
            {
                if (stream != null)
                {
                    stream.Flush();
                    stream.Close();
                    stream = null;
                }
            }
        }
        #endregion

        #region "Send Mail"
        /// <summary>
        /// 開発者: イルファン　マンスリー
        /// 説明: This function aim to send mail if error found for same Data date and Gyom Type.
        /// 作成日: 2016-10-19
        /// </summary>
        /// <param name="strGyomType">For which gyom it is. </param>
        /// <param name="strPackageCode">Package id</param>
        /// <param name="dtCurDate">Data Date</param>
        /// <param name="dtSysDate">System Date when this package is been started to be execute.</param>
        /// <param name="myConnection"></param>
        private void _sendMail(string strGyomType, string strPackageCode, DateTime dtCurDate, string strLogFullPath, SqlConnection myConnection)
        {
            string strMailFromId = string.Empty;
            string strMailFromName = string.Empty;
            string strMailServer = string.Empty;
            StringBuilder strBuildQuery;
            string strTo = string.Empty;
            MailAddress mailFrom;
            MailMessage mailMsg;
            DataTable dtDetails;
            SmtpClient emailClient;
            StringBuilder strERRQuery = new StringBuilder();
            try
            {
                strGyomType = strGyomType.Replace(".dtsx", "");
                strLogFullPath = strLogFullPath + @"\PACKAGE_" + strGyomType + "_" + dtCurDate.ToString("yyyyMMdd") + ".log";

                _connectionOpen(myConnection);  //Open SQL Connection
                strMailFromId = Dts.Variables["User::mailFromId"].Value.ToString(); //From Which Email-Id mail will go through
                strMailFromName = Dts.Variables["User::mailFromName"].Value.ToString(); //Sender name to show.
                strMailServer = Dts.Variables["User::mailServer"].Value.ToString(); //Server Name/Address to send the mail.
                strBuildQuery = new StringBuilder();
                dtDetails = new DataTable();

                #region Create Mail Body And Send Mail
                emailClient = new SmtpClient(strMailServer);
                emailClient.Port = 587;
                emailClient.Credentials = new NetworkCredential(strMailFromId, "righton0123");
                emailClient.DeliveryMethod = SmtpDeliveryMethod.Network;
                emailClient.EnableSsl = true;
                mailFrom = new MailAddress(strMailFromId, strMailFromName);
                mailMsg = new MailMessage();
                mailMsg.From = mailFrom;

                //Start: 電子メールアドレス,who will recieve the ERROR_Log mail
                strBuildQuery.Clear();
                strBuildQuery.Append("SELECT 電子メール FROM [KANSHI_MAIL_ADDRESS]");
                strBuildQuery.AppendLine("WHERE ユーザグループ='ERROR' AND 削除フラグ='0'");
                dtDetails.Reset();
                dtDetails = _getDataTable(strBuildQuery.ToString(), myConnection);
                strTo = string.Empty;
                if (dtDetails.Rows.Count > 0)
                {
                    strTo = dtDetails.Rows[0]["電子メール"].ToString();
                    dtDetails.Reset(); //リセットデータテーブル。
                }
                //End: 電子メールアドレス,who will recieve the ERROR_Log mail

                #region メールボディーにエラーログ内容
                strBuildQuery.Clear();
                strBuildQuery.Append("本メールは、MINIMDシステムからのお知らせです。<br /> <br />");
                strBuildQuery.Append("【" + strGyomType + "】のパッケージでエラーが発生しました。<br />");
                strBuildQuery.Append("エラーの内容が添付ファイルで送りいたします。<br /> <br />");
                strBuildQuery.Append(" ご確認お願い致します。<br /><br />");
                strBuildQuery.Append(" 以上です。<br />");
                strBuildQuery.Append(" 宜しくお願い致します。");
                #endregion メールボディーとエラーログ内容

                mailMsg.To.Add(strTo);
                if (File.Exists(strLogFullPath))
                {
                    mailMsg.Attachments.Add(new Attachment(strLogFullPath));    //Attachment
                }
                mailMsg.Body = strBuildQuery.ToString();
                mailMsg.BodyEncoding = Encoding.UTF8;
                mailMsg.Subject = "【MINI-MD】パッケージエラー_" + strGyomType + "_" + dtCurDate.ToString("yyyyMMdd");
                mailMsg.SubjectEncoding = Encoding.UTF8;
                mailMsg.IsBodyHtml = true;
                emailClient.Send(mailMsg);
                #endregion
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            #region "CATCH/FINALLY"
            catch (Exception ex)
            {
                //システムエラーの場合。
                try
                {
                    strERRQuery.Clear();
                    strERRQuery.Append("INSERT INTO ");
                    strERRQuery.Append("KANSHI_PACKAGE_ERROR([パッケージコード],[データ日付],[エラー日時],[エラー内容],[エラーフラグ]) ");
                    strERRQuery.Append("VALUES('S" + strPackageCode + "','" + Dts.Variables["User::currentDate"].Value.ToString() + "','" + Dts.Variables["User::sysDate"].Value.ToString() + "','システムエラー:" + ex.Message.Replace("'", "-") + "','2');");
                    _updateInsert(strERRQuery.ToString(), myConnection);
                    _Logging(Dts.Variables["User::filePath"].Value.ToString(),string.Empty, ex.Message, string.Empty);
                }
                catch (Exception sqlException)
                {
                    _Logging(Dts.Variables["User::filePath"].Value.ToString(),string.Empty, ex.Message, sqlException.Message);
                }
            }
            finally
            {
                strERRQuery = null;
                strGyomType = null;
                strPackageCode = null;
                strMailFromId = null;
                strMailFromName = null;
                strMailServer = null;
                myConnection = null;
                strBuildQuery = null;
                strTo = null;
                mailFrom = null;
                mailMsg = null;
                dtDetails = null;
                emailClient = null;
            }
            #endregion
        }
        #endregion

        #region Connection Open
        private void _connectionOpen(SqlConnection myConnection)
        {
            if (myConnection.State != ConnectionState.Open)
            {
                myConnection.Open();
            }
        }
        #endregion

        #region Connection Close
        private void _connectionClose(SqlConnection myConnection)
        {
            if (myConnection.State != ConnectionState.Closed)
            {
                myConnection.Close();
            }
        }
        #endregion
    }
    class MyEventListener : DefaultEvents
    {
        public string errDescription;
        public override bool OnError(DtsObject source, int errorCode, string subComponent,
          string description, string helpFile, int helpContext, string idofInterfaceWithError)
        {

            errDescription = description;
            return false;
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ST_1859322962114838ad8f52fef57f1263.csproj"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  --><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><OutputType>Library</OutputType><NoStandardLibraries>false</NoStandardLibraries><RootNamespace>ST_6676d8b7187342a79cc73e50019b7690.csproj</RootNamespace><AssemblyName>ST_1859322962114838ad8f52fef57f1263</AssemblyName><ProjectGuid>{A0CFAB5E-6A3C-4852-A599-C6F278938F02}</ProjectGuid><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><WarningLevel>4</WarningLevel></PropertyGroup><!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  --><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><WarningLevel>4</WarningLevel></PropertyGroup><!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  --><PropertyGroup><PreBuildEvent></PreBuildEvent><PostBuildEvent></PostBuildEvent></PropertyGroup><!-- This sections specifies references for the project. --><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  --><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile><!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    --></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><!-- This section defines VSTA properties that describe the host-changable project properties. --><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" /><Host Name="SSIS_ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST120</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>st_6676d8b7187342a79cc73e50019b7690</msb:CodeName>
		<msb:DisplayName>st_6676d8b7187342a79cc73e50019b7690</msb:DisplayName>
		<msb:ProjectId>{3A4BDCA8-2EDC-4699-B6FC-7D334B235149}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_1859322962114838ad8f52fef57f1263.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_6676d8b7187342a79cc73e50019b7690.csproj.Properties.Settings.get_Default():ST_6676d8b7187342a79cc73e50019b7690.csproj.Properties.Sett" +
    "ings")]

namespace ST_6676d8b7187342a79cc73e50019b7690.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_6676d8b7187342a79cc73e50019b7690.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_6676d8b7187342a79cc73e50019b7690.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_6676d8b7187342a79cc73e50019b7690.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_6676d8b7187342a79cc73e50019b7690.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_6676d8b7187342a79cc73e50019b7690.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_1859322962114838ad8f52fef57f1263.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDANN1XFgAAAAAAAAAAOAAAiELAQsAAFYAAAAIAAAAAAAAHnQA
AAAgAAAAgAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAADAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAMRzAABXAAAAAIAAAHAEAAAAAAAAAAAAAAAAAAAA
AAAAAKAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAJFQAAAAgAAAAVgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHAEAAAAgAAAAAYAAABYAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAKAAAAACAAAAXgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAA
dAAAAAAAAEgAAAACAAUAMEcAAJQsAAABAAAAAAAAAHhGAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABswBgBIAgAAAgAAEQIoFgAACm8XAAAKcoEAAHBvGAAACm8ZAAAKbxoA
AAoKBnMbAAAKC3McAAAKDH4dAAAKEwRzHgAAChMFAgcoEAAABnMeAAAKDQlyrwAAcG8fAAAKJgly
wQAAcG8fAAAKJgly9wAAcG8fAAAKJglyOwEAcG8fAAAKJglyiwEAcG8fAAAKJgly0QEAcG8fAAAK
JglyFwIAcG8fAAAKJglyVwIAcG8fAAAKJgly4AIAcG8fAAAKJglvGgAAChMECG8gAAAKAhEEBygM
AAAGDAhvIQAACm8iAAAKFjEbAghvIQAACm8iAAAKfQYAAAQCCAcoCQAABisgAigWAAAKbxcAAApy
JgMAcG8YAAAKFowoAAABbyMAAAoCKBYAAAoWbyQAAArdDQEAABMGEQVvJQAACiYRBXJKAwBwbx8A
AAomEQVyZAMAcG8fAAAKJhEFHY0kAAABEwgRCBZy6wMAcKIRCBcCKBYAAApvFwAACnILBABwbxgA
AApvGQAACm8aAAAKohEIGHIvBABwohEIGQIoFgAACm8XAAAKcjcEAHBvGAAACm8ZAAAKbxoAAAqi
EQgaclMEAHCiEQgbEQZvJgAACnJrBABwcm8EAHBvJwAACqIRCBxycwQAcKIRCCgoAAAKbx8AAAom
AhEFbxoAAAoHKA0AAAbePBMHAgIoFgAACm8XAAAKcoMEAHBvGAAACm8ZAAAKbxoAAAp+HQAAChEG
byYAAAoRB28mAAAKKA4AAAbeAN4A3hICBygRAAAGFAwUDRQTBBQTBdwqQUwAAAAAAAAoAQAAzQAA
APUBAAA8AAAAKQAAAQAAAAA7AAAA6wAAACYBAAANAQAAKQAAAQIAAAA7AAAA+gEAADUCAAASAAAA
AAAAABswCADqDAAAAwAAEQIoFgAACm8XAAAKcoMEAHBvGAAACm8ZAAAKbxoAAAoKAigWAAAKbxcA
AApyoQQAcG8YAAAKbxkAAApvGgAACgsCKBYAAApvFwAACnILBABwbxgAAApvGQAACigpAAAKDHMe
AAAKDXMcAAAKEwV+HQAAChMIFxMRAgQoEAAABhYTFTgOCwAAKCoAAAoTIBIgcsUEAHAoKwAAChMG
A28hAAAKERVvLAAACnLRBABwby0AAApvGgAAChMHA28hAAAKERVvLAAACnLbBABwby0AAApvGgAA
ChMIA28hAAAKERVvLAAACnLtBABwby0AAApvGgAAChMJA28hAAAKERVvLAAACnL7BABwby0AAApv
GgAAChMKA28hAAAKERVvLAAACnIHBQBwby0AAApvGgAAChMLA28hAAAKERVvLAAACnIdBQBwby0A
AAooLgAAChMPA28hAAAKERVvLAAACnIvBQBwby0AAAooLgAAChMNA28hAAAKERVvLAAACnI7BQBw
by0AAAooLgAAChMOHI0kAAABEyERIRYGohEhF3JJBQBwohEhGBEKohEhGXJNBQBwohEhGhICclEF
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
CAgCKBYAAApvFwAACnKDBABwbxgAAApvGQAACihDAAAKcqcMAHBywQwAcG8nAAAKBCgPAAAGAgJ7
BQAABBdYfQUAAAQ4PAIAAAIoFgAACm8XAAAKciYDAHBvGAAACheMKAAAAW8jAAAKOBcCAAARCyg6
AAAKOqgBAAAXExARCxeNNQAAARMoESgWHyydEShvOwAAChMEFhMdOGABAAB+HQAAChMbfh0AAAoT
HHJ5CABwEQQRHZpygwcAcCg1AAAKExwRBW8gAAAKAhEcBCgMAAAGEwURBW8hAAAKFm8sAAAKchYJ
AHBvLQAACm8aAAAKExsRG3ImCQBwKDEAAAo51AAAABEFbyAAAAp+HQAAChMccioJAHATHBEccv8J
AHAoNAAAChMcERxywgoAcBEEER2ackcLAHAoPAAAChMcERxyTQsAcCg0AAAKExwCERwEKAwAAAYT
BQIRBQQoCQAABhEFbyAAAAp+HQAAChMccnkIAHARBBEdmnKDBwBwKDUAAAoTHAIRHAQoDAAABhMF
EQVvIQAAChZvLAAACnIWCQBwby0AAApvGgAAChMbERtybwUAcCg9AAAKLAUWExArSQJ7BAAABBEE
ER2acm8FAHBvPgAACishERtykQsAcCgxAAAKLBMCAnsFAAAEF1h9BQAABBYTECsRER0XWBMdER0R
BI5pP5X+//8RECwoAhEIEQkRChENEQ4RCgQoCgAABisTAhEIEQkRChENEQ4RCgQoCgAABgJ7BQAA
BAJ7BgAABDMiAigWAAAKbxcAAApyJgMAcG8YAAAKFowoAAABbyMAAAorawIoFgAACm8XAAAKciYD
AHBvGAAACheMKAAAAW8jAAAKfh0AAAoTBn4dAAAKEwd+HQAAChMIfh0AAAoTCX4dAAAKEwp+HQAA
ChMLfh0AAAoTDBEVF1gTFREVA28hAAAKbyIAAAoXWT7e9P//3RgBAAATHglvJQAACiYJckoDAHBv
HwAACiYJcmQDAHBvHwAACiYJHwmNJAAAARMpESkWcs0MAHCiESkXEQiiESkYci8EAHCiESkZAigW
AAAKbxcAAApyCwQAcG8YAAAKbxkAAApvGgAACqIRKRpyLwQAcKIRKRsCKBYAAApvFwAACnI3BABw
bxgAAApvGQAACm8aAAAKohEpHHJTBABwohEpHREebyYAAApyawQAcHJvBABwbycAAAqiESkecnME
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
bx8AAAomAhEJbxoAAAoOBSgNAAAGAgIoFgAACm8XAAAKcoMEAHBvGAAACm8ZAAAKbxoAAAp+HQAA
ChEKbyYAAAp+HQAACigOAAAG3jwTCwICKBYAAApvFwAACnKDBABwbxgAAApvGQAACm8aAAAKfh0A
AAoRCm8mAAAKEQtvJgAACigOAAAG3gDeAN4kFBMJFBABFBACFAoUCxQMFBAFFA0UEwQUEwUUEwYU
EwcUEwjcKgAAQUwAAAAAAACeAgAAEwEAALEDAAA8AAAAKQAAAQAAAAAgAAAAfAIAAJwCAABTAQAA
KQAAAQIAAAAgAAAA0QMAAPEDAAAkAAAAAAAAAEIDb2gAAAoXLgYDb2kAAAoqPgNvaAAACiwGA29q
AAAKKkoCc2sAAAp9BAAABAIobAAACioqAg4EfQoAAAQWKh4CKG0AAAoqALQAAADOyu++AQAAAJEA
AABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4w
LjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5
c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAABC
U0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAACICAAAI34AAPQIAAAoDQAAI1N0cmlu
Z3MAAAAAHBYAAFASAAAjVVMAbCgAABAAAAAjR1VJRAAAAHwoAAAYBAAAI0Jsb2IAAAAAAAAAAgAA
AVcdogkJAwAAAPolMwAWAAABAAAATAAAAAYAAAAKAAAAFAAAACYAAABtAAAAAgAAAA8AAAAJAAAA
AgAAAAMAAAAEAAAAAgAAAAEAAAAFAAAAAQAAAAEAAAAAAAoAAQAAAAAABgDfANgACgD7AOYADgBb
ATIBBgB3AdgAEgC7AZsBBgDaAckBBgALAvYBBgCgAoUCFgD8AvACFgAcAwYDBgB9A9gAEgDYA5sB
BgB1BVsFBgCgBY4FBgC3BY4FBgDUBY4FBgDzBY4FBgAMBo4FBgAlBo4FBgBABo4FBgBbBo4FBgB0
Bo4FBgCtBo0GBgDNBo0GBgAiBw8HBgA/B9gABgBEB9gABgBoB44FCgCUB34HCgCtB34HBgDCB40G
DgDkBzIBDgAGCDIBEgAgCJsBEgA4CJsBBgBdCNgABgB2CGoIFgCRCPACFgCsCPACBgDRCNgABgD4
CNgABgAdCdgAFgA4CfACBgBsCWIJEgB4CZsBEgCECZsBEgCMCZsBEgCjCZsBEgCwCZsBEgC7CZsB
EgDJCZsBEgDVCZsBBgD3CdgABgAeCmIJFgBECgYDFgBiCk8KFgBsCvACFgCICgYDFgCpCk8KBgDM
CmIJBgDeCmIJBgDrCmIJBgD4CmIJCgAjCxMLCgBCCzcLCgBUCzcLCgB3CxMLCgCrCxMLCgC3CxML
CgDXCxMLCgD0CxMLCgAZDBMLBgBDDCQMBgBZDGoIFgCwDE8KFgC9DPACAAAAAAEAAAAAAAEAAQAA
ABAAMgA8AAUAAQABAAABEAByADwACQADAAUAAQAQAHsAhgANAAQACAADAQAAsQAAABEABwATAAAA
EAC/AIYAFQAKABMAEQDqARMAEQAXAhcAEQBhAjkAAQCtAkcABgC+Ak8ABgDTAk8ABgaxA08AVoC5
A5kAVoDBA5kABgDJA6cAUCAAAAAAgxgnAhsAAQBYIAAAAACTCC0CHwABAJEgAAAAAJMIQQIkAAEA
mCAAAAAAkwhNAikAAQCgIAAAAACWCHECPQACALMgAAAAAIYYJwIbAAIApyAAAAAAkRjdB+cAAgC8
IAAAAACGAOsCGwACAFwjAAAAAIQAKgNSAAIAoDAAAAAAhAA2A1oABADsNgAAAACBAEgDZgALAAw+
AAAAAIYAWANxABEAvD8AAAAAhABmA3kAEwAQQAAAAACGAHQDgAAVAMBBAAAAAIEAhgOIABkAMEYA
AAAAgQCQA5MAHgBBRgAAAACBAKADkwAfAFFGAAAAAIYYJwIbACAAZEYAAAAAxgDiA6oAIABvRgAA
AACGGCcCGwAnAAAAAQDqAwAAAQDwAwAAAgABBAAAAQAOBAAAAgAbBAAAAwAuBAAABAA+BAAABQBR
BAAABgBrBAAABwABBAAAAQAOBAAAAgB3BAAAAwAbBAAABACPBAAABQBrBAAABgABBAAAAQCgBAAA
AgABBAAAAQCgBAAAAgABBAAAAQCpBAAAAgAbBAAAAwC1BAAABADBBAAAAQDRBAAAAgDdBAAAAwDs
BAAABAD2BAAABQABBAAAAQABBAAAAQABBAAAAQAFBQAAAgAMBQAAAwAWBQAABAAjBQAABQAvBQAA
BgA4BQAABwBEBWkAJwK2AHEAJwK2AHkAJwK2AIEAJwK2AIkAJwK2AJEAJwK2AJkAJwK2AKEAJwK2
AKkAJwK2ALEAJwK2ALkAJwK7AMEAJwIbAMkAJwIbAAkAJwIbANEAVgfAANEAcQfHADEAJwLMAOkA
JwLYAPkAJwIbABEAJwIbAAEBJwIbABkAGAjrAAkBKgjxABEBQQj3ABkBSgj+AAkAVAgCAVEAJwK2
AEkAJwIbACEBZAinACkBJwIbACkBhAgGAUkAiwgbAEkAowgNATkBxwgTARkB2QgXAQkB4wi7ACkB
8ggcAUkBAgkCASEBDgkiASEBFgkoAVEBJQlFAVkAMAlLAVkAVAhQATEBQQhVAVkBQQhcAVEBQAlh
AQwASgltAQwAQQhzASEBVgl6AWEBcQmAAWkBJwIbACEBFgmFASEBFgmLAWkBlwmSAYEBKgjxAIkB
4QmcASEBFgmvASEB6QmAASEB/Am1ASEBFgm8ASEBAgp6AQwAEArEASEBFArMAbEBIwrRASEBLwoT
ASEBOgrWAVEBVAjcAVEBJQkoAiEBFgkuArkBJwJ5AMEBeAp6AtEBJwIbANEBlwqBAtkBtwqIAsEB
vAoTAWEB1wqtAukB5QobAPEBJwK0AvkBAwu2APkBDQsbAPkB5QobAAECJwK2AAECLgu7AAkCJwLM
AgECZwvSAgECigvZAgECnQvgAiECJwLMAikCJwIbACkCwwvlAikBzAsGASkC7QvsAjECEAq2ACkC
CQzyAkECJwK2ABQAEAoBAykCUAy2AFECYgwHAykCawwNAykCfAy2ACkCiAwNAykCnAzgAgECqwwU
A1kCzQw9A1kC1wwbAFkC5QobAAwAJwIbABkAJwIbACkAJwIbAAgAIACdAAgAJACiACkAkwDeAC4A
GwC7Ay4AIwC7Ay4AYwD3Ay4ACwBDAy4AEwCLAy4AMwCLAy4AKwDBAy4AOwDPAy4AQwC7Ay4AWwDu
A0MAawCiAEkAkwDeAGEAmwCiAIMAqwCiANMALgHhATUCVgKOAqQCugIbAwIAAQADAAMAAADaAS8A
AABZAjQAAAB9AkIAAgACAAMAAgADAAUAAQAEAAUAAgAFAAcAZgH4AgSAAAABAAAAORixRQAAAAAA
AOsGAAAEAAAAAAAAAAAAAAABAM8AAAAAAAQAAAAAAAAAAAAAAAEA2AAAAAAADAAAAAAAAAAAAAAA
CgATAQAAAAAMAAAAAAAAAAAAAAAKAHwBAAAAAAQAAAAAAAAAAAAAAAEA8AIAAAAAAAAAAAEAAADc
DAAABQAEAAAAAAAAPE1vZHVsZT4AU1RfMTg1OTMyMjk2MjExNDgzOGFkOGY1MmZlZjU3ZjEyNjMu
ZGxsAFJlc291cmNlcwBTVF82Njc2ZDhiNzE4NzM0MmE3OWNjNzNlNTAwMTliNzY5MC5jc3Byb2ou
UHJvcGVydGllcwBTZXR0aW5ncwBTY3JpcHRNYWluAFNUXzY2NzZkOGI3MTg3MzQyYTc5Y2M3M2U1
MDAxOWI3NjkwLmNzcHJvagBTY3JpcHRSZXN1bHRzAE15RXZlbnRMaXN0ZW5lcgBtc2NvcmxpYgBT
eXN0ZW0AT2JqZWN0AFN5c3RlbS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNl
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5U
YXNrcy5TY3JpcHRUYXNrAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAERl
ZmF1bHRFdmVudHMAU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4A
U3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9yAGdl
dF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0
SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBE
aWN0aW9uYXJ5YDIAZGVwZW5kYW50UGNrZ1N0cwBpbnRFeGVjdXRlZEZpbGVDb3VudABpbnRGaWxl
VG9CZUV4ZWN1dGVDb3VudABNYWluAFN5c3RlbS5EYXRhAERhdGFUYWJsZQBTeXN0ZW0uRGF0YS5T
cWxDbGllbnQAU3FsQ29ubmVjdGlvbgBfcnVuUGFja2FnZQBfcnVuR3lvdW11UGFja2FnZQBfcnVu
R3lvdW11Q2hlY2sAX2dldERhdGFUYWJsZQBfdXBkYXRlSW5zZXJ0AF9Mb2dnaW5nAERhdGVUaW1l
AF9zZW5kTWFpbABfY29ubmVjdGlvbk9wZW4AX2Nvbm5lY3Rpb25DbG9zZQB2YWx1ZV9fAFN1Y2Nl
c3MARmFpbHVyZQBlcnJEZXNjcmlwdGlvbgBEdHNPYmplY3QAT25FcnJvcgB2YWx1ZQBEVF9QYWNr
YWdlQWxsU2VsAG15Q29ubmVjdGlvbgBzdHJQYWNrYWdlSWQAc3RyR3lvbVBhY2thZ2VOYW1lAHN0
ckZsYXRGaWxlTmFtZQBib29sRXJyb3JDaGVja0ZsYWcAYm9vbEJ1c2luZXNzRGF0YUNoZWNrRmxh
ZwBzdHJHeW9tTmFtZQBzdHJHeW9tQ2hlY2tQYWNrYWdlTmFtZQBzdHJQYWNrYWdlRm9sZGVyAHN0
clF1ZXJ5AHN0ckZpbGVQYXRoAHN0ckVycm9yTXNnAHN0ckV4Y2VwdGlvbk1zZwBzdHJHeW9tVHlw
ZQBzdHJQYWNrYWdlQ29kZQBkdEN1ckRhdGUAc3RyTG9nRnVsbFBhdGgAc291cmNlAGVycm9yQ29k
ZQBzdWJDb21wb25lbnQAZGVzY3JpcHRpb24AaGVscEZpbGUAaGVscENvbnRleHQAaWRvZkludGVy
ZmFjZVdpdGhFcnJvcgBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1ld29ya0F0
dHJpYnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5
RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2Vt
Ymx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5
cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDdWx0dXJl
QXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5Db21waWxl
clNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGli
aWxpdHlBdHRyaWJ1dGUAU1RfMTg1OTMyMjk2MjExNDgzOGFkOGY1MmZlZjU3ZjEyNjMAU3lzdGVt
LkRpYWdub3N0aWNzAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlw
ZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNv
bXBvbmVudE1vZGVsAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0
ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU1NJU1NjcmlwdFRhc2tFbnRyeVBv
aW50QXR0cmlidXRlAFNjcmlwdE9iamVjdE1vZGVsAGdldF9EdHMAVmFyaWFibGVzAGdldF9WYXJp
YWJsZXMAVmFyaWFibGUAZ2V0X0l0ZW0AZ2V0X1ZhbHVlAFRvU3RyaW5nAFN0cmluZwBFbXB0eQBT
eXN0ZW0uVGV4dABTdHJpbmdCdWlsZGVyAEFwcGVuZABSZXNldABEYXRhUm93Q29sbGVjdGlvbgBn
ZXRfUm93cwBJbnRlcm5hbERhdGFDb2xsZWN0aW9uQmFzZQBnZXRfQ291bnQAQm9vbGVhbgBzZXRf
VmFsdWUAc2V0X1Rhc2tSZXN1bHQAQ2xlYXIARXhjZXB0aW9uAGdldF9NZXNzYWdlAFJlcGxhY2UA
Q29uY2F0AENvbnZlcnQAVG9EYXRlVGltZQBnZXRfTm93AERhdGFSb3cAVG9Cb29sZWFuAENvbnRh
aW5zS2V5AG9wX0VxdWFsaXR5AFN5c3RlbS5JTwBGaWxlAEV4aXN0cwBBcHBsaWNhdGlvbgBQYWNr
YWdlAElEVFNFdmVudHMATG9hZFBhY2thZ2UARHRzQ29udGFpbmVyAEV4ZWN1dGFibGUARFRTRXhl
Y1Jlc3VsdABDb25uZWN0aW9ucwBJRFRTTG9nZ2luZwBFeGVjdXRlAElzTnVsbE9yRW1wdHkAQ2hh
cgBTcGxpdABvcF9JbmVxdWFsaXR5AEFkZABDb21wYXJlVG8AUGF0aABHZXRGaWxlTmFtZQBnZXRf
TGVuZ3RoAFN1YnN0cmluZwBTcWxDb21tYW5kAFN5c3RlbS5EYXRhLkNvbW1vbgBEYkNvbW1hbmQA
Q29tbWFuZFR5cGUAc2V0X0NvbW1hbmRUeXBlAFNxbERhdGFBZGFwdGVyAHNldF9TZWxlY3RDb21t
YW5kAERiRGF0YUFkYXB0ZXIARmlsbABFeGVjdXRlTm9uUXVlcnkARmlsZVN0cmVhbQBDcmVhdGUA
U3RyZWFtAENsb3NlAFN0cmVhbVdyaXRlcgBUZXh0V3JpdGVyAFdyaXRlTGluZQBGbHVzaABTeXN0
ZW0uTmV0Lk1haWwAU210cENsaWVudABzZXRfUG9ydABTeXN0ZW0uTmV0AE5ldHdvcmtDcmVkZW50
aWFsAElDcmVkZW50aWFsc0J5SG9zdABzZXRfQ3JlZGVudGlhbHMAU210cERlbGl2ZXJ5TWV0aG9k
AHNldF9EZWxpdmVyeU1ldGhvZABzZXRfRW5hYmxlU3NsAE1haWxBZGRyZXNzAE1haWxNZXNzYWdl
AHNldF9Gcm9tAEFwcGVuZExpbmUATWFpbEFkZHJlc3NDb2xsZWN0aW9uAGdldF9UbwBBdHRhY2ht
ZW50Q29sbGVjdGlvbgBnZXRfQXR0YWNobWVudHMAQXR0YWNobWVudABTeXN0ZW0uQ29sbGVjdGlv
bnMuT2JqZWN0TW9kZWwAQ29sbGVjdGlvbmAxAHNldF9Cb2R5AEVuY29kaW5nAGdldF9VVEY4AHNl
dF9Cb2R5RW5jb2RpbmcAc2V0X1N1YmplY3QAc2V0X1N1YmplY3RFbmNvZGluZwBzZXRfSXNCb2R5
SHRtbABTZW5kAERiQ29ubmVjdGlvbgBDb25uZWN0aW9uU3RhdGUAZ2V0X1N0YXRlAE9wZW4AU1Rf
NjY3NmQ4YjcxODczNDJhNzljYzczZTUwMDE5Yjc2OTAuY3Nwcm9qLlByb3BlcnRpZXMuUmVzb3Vy
Y2VzLnJlc291cmNlcwAAAAB/UwBUAF8ANgA2ADcANgBkADgAYgA3ADEAOAA3ADMANAAyAGEANwA5
AGMAYwA3ADMAZQA1ADAAMAAxADkAYgA3ADYAOQAwAC4AYwBzAHAAcgBvAGoALgBQAHIAbwBwAGUA
cgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAC1VAHMAZQByADoAOgBjAG8AbgBuAGUAYwB0
AGkAbwBuAFMAdAByAGkAbgBnAAARIABTAEUATABFAEMAVAAgAAA1IABtAHMAdAAuANEwwzCxMPww
uDCzMPwwyTAsAG0AcwB0AC4A0TDDMLEw/DC4MA1ULAAgAAFDIABtAHMAdAAuANUwoTCkMOswDVQs
AG0AcwB0AC4AxzD8ML8wHGk8iiwAbQBzAHQALgBtadlSwTCnMMMwrzAsACAAAU8gAG0AcwB0AC4A
jFuGTkJmk5UsAG0AcwB0AC4AnU9YW9EwwzCxMPwwuDCzMPwwyTAsACAAbQBzAHQALgBEAE8ATgBF
ANUwoTCkMOswIAABRSAARgBSAE8ATQAgAEsAQQBOAFMASABJAF8AUABLAEcAXwBUAFIATgBfAEQA
RQBUAEEASQBMAFMAIAB0AHIAbgAgACAAAEUgAEoATwBJAE4AIABLAEEATgBTAEgASQBfAFAASwBH
AF8ATQBTAFQAXwBEAEUAVABBAEkATABTACAAbQBzAHQAIAAgAAA/IABPAE4AIABtAHMAdAAuANEw
wzCxMPwwuDCzMPwwyTA9AHQAcgBuAC4A0TDDMLEw/DC4MLMw/DDJMCAAIAABgIcgAFcASABFAFIA
RQAgAG0AcwB0AC4ASlJkltUw6TCwMD0AJwBmAGEAbABzAGUAJwAgAEEATgBEACAAdAByAG4ALgCf
W0yIuTDGMPwwvzC5MD0AJwAqZycAIABBAE4ARAAgAHQAcgBuAC4ASlJkltUw6TCwMD0AJwBGAEEA
TABTAEUAJwAgAAFFIABPAFIARABFAFIAIABCAFkAIABtAHMAdAAuAJ9bTIgGmGp1LABtAHMAdAAu
AJ1PWFvRMMMwsTD8MLgwszD8MMkwOwABI1UAcwBlAHIAOgA6AG4AZQBlAGQAVABvAFMAbABlAGUA
cAAAGUkATgBTAEUAUgBUACAASQBOAFQATwAgAACAhUsAQQBOAFMASABJAF8AUABBAEMASwBBAEcA
RQBfAEUAUgBSAE8AUgAoAFsA0TDDMLEw/DC4MLMw/DDJMF0ALABbAMcw/DC/MOVl2E5dACwAWwCo
MOkw/DDlZUJmXQAsAFsAqDDpMPwwhVG5W10ALABbAKgw6TD8MNUw6TCwMF0AKQAgAAEfVgBBAEwA
VQBFAFMAKAAnAFMAOQA5ADkAJwAsACcAASNVAHMAZQByADoAOgBjAHUAcgByAGUAbgB0AEQAYQB0
AGUAAAcnACwAJwABG1UAcwBlAHIAOgA6AHMAeQBzAEQAYQB0AGUAABcnACwAJwC3MLkwxjDgMKgw
6TD8MDoAAQMnAAEDLQABDycALAAnADIAJwApADsAAR1VAHMAZQByADoAOgBmAGkAbABlAFAAYQB0
AGgAACNVAHMAZQByADoAOgBwAGEAYwBrAGEAZwBlAFAAYQB0AGgAAAtIAEgAOgBtAG0AAAmMW4ZO
QmaTlQER0TDDMLEw/DC4MLMw/DDJMAEN0TDDMLEw/DC4MA1UAQvVMKEwpDDrMA1UARWdT1hb0TDD
MLEw/DC4MLMw/DDJMAERRABPAE4ARQDVMKEwpDDrMAELxzD8ML8wHGk8igENbWnZUsEwpzDDMK8w
AQNcAAADXwAAEXkAeQB5AHkATQBNAGQAZAAAC18ARABPAE4ARQAAAwhuATlcADkAOQA5AF8ASgBV
AFMASABJAE4AXwBFAFIAUgBPAFIAXwBDAEgARQBDAEsALgBkAHQAcwB4AAAXcABhAGMAawBhAGcA
ZQBDAG8AZABlAAAhYwBvAG4AbgBlAGMAdABpAG8AbgBTAHQAcgBpAG4AZwAAF2MAdQByAHIAZQBu
AHQARABhAHQAZQAAFWYAaQBsAGUARgBvAGwAZABlAHIAABFmAGkAbABlAE4AYQBtAGUAAD1VAFAA
RABBAFQARQAgAEsAQQBOAFMASABJAF8AUABLAEcAXwBUAFIATgBfAEQARQBUAEEASQBMAFMAIAAA
RVMARQBUACAAn1tMiLkwxjD8ML8wuTA9ACcAqDDpMPwwJwAsACAAqDDpMPww5WU9AEcARQBUAEQA
QQBUAEUAKAApACAAASFXAEgARQBSAEUAIADRMMMwsTD8MLgwszD8MMkwPQAnAAEpJwAgAEEATgBE
ACAASlJkltUw6TCwMD0AJwBmAGEAbABzAGUAJwAgAAETUwBFAEwARQBDAFQAIAAqACAAADcgAEYA
UgBPAE0AIABLAEEATgBTAEgASQBfAFAAQQBDAEsAQQBHAEUAXwBFAFIAUgBPAFIAIAAAIyAAVwBI
AEUAUgBFACAA0TDDMLEw/DC4MLMw/DDJMD0AJwABGycAIABBAE4ARAAgAMcw/DC/MOVl2E49ACcA
AQUnADsAAUUgAEkATgBTAEUAUgBUACAASQBOAFQATwAgAEsAQQBOAFMASABJAF8AUABBAEMASwBB
AEcARQBfAEUAUgBSAE8AUgAgAABXIAAoANEwwzCxMPwwuDCzMPwwyTAsAMcw/DC/MOVl2E4sAKgw
6TD8MOVlQmYsANUwoTCkMOswDVQsAKgw6TD8MIVRuVssAKgw6TD8MNUw6TCwMCkAIAABEyAAVgBB
AEwAVQBFAFMAKAAnAAE9JwAsACcAqDDpMPww0TDDMLEw/DC4MGcwqDDpMPwwTDB6dh91VzB+MFcw
XzACMCcALAAnADIAJwApADsAAYCbUwBFAEwARQBDAFQAIACfW0yIuTDGMPwwvzC5MCAARgBSAE8A
TQAgAEsAQQBOAFMASABJAF8AUABLAEcAXwBUAFIATgBfAEQARQBUAEEASQBMAFMAIABXAEgARQBS
AEUAIABKUmSW1TDpMLAwPQAnAGYAYQBsAHMAZQAnACAAQQBOAEQAIADRMMMwsTD8MLgwszD8MMkw
PQAnAAEPn1tMiLkwxjD8ML8wuTABAypnAYDTUwBFAEwARQBDAFQAIAAgAG0AcwB0AC4A0TDDMLEw
/DC4MLMw/DDJMCwAbQBzAHQALgDRMMMwsTD8MLgwDVQsACAAIABtAHMAdAAuANUwoTCkMOswDVQs
AG0AcwB0AC4AxzD8ML8wHGk8iiwAbQBzAHQALgBtadlSwTCnMMMwrzAsACAAIABtAHMAdAAuAIxb
hk5CZpOVLABtAHMAdAAuAJ1PWFvRMMMwsTD8MLgwszD8MMkwLAAgAG0AcwB0AC4ARABPAE4ARQDV
MKEwpDDrMCAAAYDBRgBSAE8ATQAgAEsAQQBOAFMASABJAF8AUABLAEcAXwBUAFIATgBfAEQARQBU
AEEASQBMAFMAIAB0AHIAbgAgACAAIABKAE8ASQBOACAASwBBAE4AUwBIAEkAXwBQAEsARwBfAE0A
UwBUAF8ARABFAFQAQQBJAEwAUwAgAG0AcwB0ACAATwBOACAAbQBzAHQALgDRMMMwsTD8MLgwszD8
MMkwPQB0AHIAbgAuANEwwzCxMPwwuDCzMPwwyTAgACAAAYCDVwBIAEUAUgBFACAAbQBzAHQALgBK
UmSW1TDpMLAwPQAnAGYAYQBsAHMAZQAnACAAQQBOAEQAIAB0AHIAbgAuAJ9bTIi5MMYw/DC/MLkw
PQAnACpnJwAgACAAQQBOAEQAIABtAHMAdAAuANEwwzCxMPwwuDCzMPwwyTAgAD0AIAAnAAEFJwAg
AAFDTwBSAEQARQBSACAAQgBZACAAbQBzAHQALgCfW0yIBphqdSwAbQBzAHQALgCdT1hb0TDDMLEw
/DC4MLMw/DDJMDsAAQeoMOkw/DABNycALAAnAEQATwBOAEUA1TChMKQw6zBMMIuJZDBLMIowfjBb
MJMwAjAnACwAJwAyACcAKQA7AAE/IABVAFAARABBAFQARQAgAEsAQQBOAFMASABJAF8AUABLAEcA
XwBUAFIATgBfAEQARQBUAEEASQBMAFMAIAAAJyAAUwBFAFQAIACfW0yIuTDGMPwwvzC5MD0AJwCo
MOkw/DAnACAAAR0nACAAQQBOAEQAIACkMPMw3TD8MMgw5WU9ACcAASsnACAAQQBOAEQAIABKUmSW
1TDpMLAwPQAnAEYAQQBMAFMARQAnADsAIAABI0QATwBOAEUA1TChMKQw6zBMMIuJZDBLMIowfjBb
MJMwAjABGXIAZQBjAGUAaQB2AGUAXABkAGEAdABhAAALRQByAHIAbwByAAATVgBBAEwAVQBFAFMA
KAAnAFMAAVdTAEUAVAAgAJ9bTIi5MMYw/DC/MLkwPQAnAJ9bTIgtTicALAAgAIuVy1lCZpOVPQBH
AEUAVABEAEEAVABFACgAKQAsACAApDDzMN0w/DDIMOVlPQAnAAFLJwAgAEEATgBEACAAn1tMiLkw
xjD8ML8wuTA9ACcAKmcnACAAQQBOAEQAIABKUmSW1TDpMLAwPQAnAGYAYQBsAHMAZQAnADsAIAAB
KzkAOQA5AF8ARwBZAE8AVQBNAFUAXwBDAEgARQBDAEsALgBkAHQAcwB4AABDUwBFAFQAIACfW0yI
uTDGMPwwvzC5MD0AJwCoMOkw/DAnACwAIACoMOkw/DDlZT0ARwBFAFQARABBAFQARQAoACkAASkn
ACAAQQBOAEQAIABKUmSW1TDpMLAwPQAnAGYAYQBsAHMAZQAnADsAAUsgACgA0TDDMLEw/DC4MLMw
/DDJMCwAxzD8ML8w5WXYTiwAqDDpMPww5WVCZiwAqDDpMPwwhVG5WywAqDDpMPww1TDpMLAwKQAg
AAERAjAnACwAJwAyACcAKQA7AAE/UwBFAFQAIACfW0yIuTDGMPwwvzC5MD0AJwAIbicALAAgAEJ9
hk5CZpOVPQBHAEUAVABEAEEAVABFACgAKQABE2MAaABlAGMAawBUAHkAcABlAABBSQBOAFMARQBS
AFQAIABJAE4AVABPACAASwBBAE4AUwBIAEkAXwBQAEEAQwBLAEEARwBFAF8ARQBSAFIATwBSAABd
KABbANEwwzCxMPwwuDCzMPwwyTBdACwAWwDHMPwwvzDlZdhOXQAsAFsAqDDpMPww5WVCZl0ALABb
AKgw6TD8MIVRuVtdACwAWwCoMOkw/DDVMOkwsDBdACkAIAABE1wAUABBAEMASwBBAEcARQBfAAAn
UwB5AHMAdABlAG0AOgA6AFAAYQBjAGsAYQBnAGUATgBhAG0AZQAACy4AZAB0AHMAeAAACS4AbABv
AGcAAAEAAwkAAAMKAAAhVQBzAGUAcgA6ADoAbQBhAGkAbABGAHIAbwBtAEkAZAAAJVUAcwBlAHIA
OgA6AG0AYQBpAGwARgByAG8AbQBOAGEAbQBlAAAhVQBzAGUAcgA6ADoAbQBhAGkAbABTAGUAcgB2
AGUAcgAAF3IAaQBnAGgAdABvAG4AMAAxADIAMwAAT1MARQBMAEUAQwBUACAA+5ZQW+Ew/DDrMCAA
RgBSAE8ATQAgAFsASwBBAE4AUwBIAEkAXwBNAEEASQBMAF8AQQBEAEQAUgBFAFMAUwBdAAFHVwBI
AEUAUgBFACAA5jD8MLYwsDDrMPww1zA9ACcARQBSAFIATwBSACcAIABBAE4ARAAgAEpSZJbVMOkw
sDA9ACcAMAAnAAEL+5ZQW+Ew/DDrMAFPLGfhMPww6zBvMAEwTQBJAE4ASQBNAEQAtzC5MMYw4DBL
MIkwbjBKMOV3iTBbMGcwWTACMDwAYgByACAALwA+ACAAPABiAHIAIAAvAD4AAQMQMAEzETBuMNEw
wzCxMPwwuDBnMKgw6TD8MEwwenYfdVcwfjBXMF8wAjA8AGIAcgAgAC8APgABR6gw6TD8MG4whVG5
W0ww+23YTtUwoTCkMOswZzABkIowRDBfMFcwfjBZMAIwPABiAHIAIAAvAD4AIAA8AGIAcgAgAC8A
PgABMSAAVDC6eI2KSjBYmEQw9IFXMH4wWTACMDwAYgByACAALwA+ADwAYgByACAALwA+AAEZIADl
TgpOZzBZMAIwPABiAHIAIAAvAD4AARkgAJxbVzBPMEowWJhEMPSBVzB+MFkwAjABJRAwTQBJAE4A
SQAtAE0ARAARMNEwwzCxMPwwuDCoMOkw/DBfAAEABZ3Zkxw7V0KkCewirD0qqwAIt3pcVhk04IkI
iYRdzYCAzJEDBhIZAwYSHQMgAAEEAAASGQQAABIdBQABARIdBAgAEhkECAASHQMGEgwEAAASDAQI
ABIMBwYVEiECDg4CBggHIAIBEiUSKQsgBwEODg4CAg4SKQogBgEODg4ODhIpByACEiUOEikGIAIB
DhIpByAEAQ4ODg4KIAUBDg4RLQ4SKQUgAQESKQMGERQEAAAAAAQBAAAAAgYOCyAHAhIxCA4ODggO
BCABAQ4EIAEBCAYAARJpEW0EIAAScQYgAgEOEnEEBwESGQUgAQEReQgBAAIAAAAAAAMAAAEFIAAS
gIUFIAASgIkGIAESgI0cAyAAHAMgAA4GIAESgJUOBSAAEoCZAyAACAQgAQEcBSAAEoCVBSACDg4O
BQABDh0OFgcJDhIpEiUSgJUOEoCVEoClEoClHQ4FAAERLRwEAAARLQQgAQ4OBiABEoCtCAQgARwO
BAABAhwGFRIhAg4OBSABAhMABiABEwETAAUAAgIODgQAAQIOBQACDg4OBgADDg4ODgkgAhKAuQ4S
gL0SIAURgMkSgM0SgIkSgL0SgNEcBQABDh0cBiABHQ4dAwcABA4ODg4OByACARMAEwEEIAEIDgQA
AQ4OBSACDggIBAABDhxGByoODhEtEoCVHQ4SJQ4ODg4ODg4CAgICAg4SgLUSgLkIEhgRgMkODggO
DggSgKUSgKURLR0OHRwdHB0DHRwdHB0cHQMdDgUAAREtDgYAAw4cHBwgBw0OES0OEoCVEoC1EoC5
EhgRgMkSgKUSgKUdHB0OHQ4jBw4SgJUSgLUSgLkODhIYEYDJEYDJEoClEoClHQ4dDh0OHQ4GIAEB
EYDlBiABARKA3QUgAQgSJRUHBxKAlRIlEoDdEoDpEoClEoClHQ4IBwISgN0SgKUGAAESgPEOBSAC
AQ4CEQcIDg4SgPkdDhEtHQ4RLR0cBSACAQ4OBiABARKBCQYgAQERgQ0EIAEBAgYgAQESgREFIAAS
gRkFIAASgR0IFRKBJQESgSEFIAEBEwAFAAASgSkGIAEBEoEpBiABARKBFSEHDg4ODhKAlQ4SgRES
gRUSJRKBARKAlRKApRKApR0OHQ4FIAARgTFHAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjAB
AFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQvAQAqU1RfNjY3NmQ4Yjcx
ODczNDJhNzljYzczZTUwMDE5Yjc2OTAuY3Nwcm9qAAAFAQAAAAANAQAIcmlnaHQtb24AAB4BABlD
b3B5cmlnaHQgQCByaWdodC1vbiAyMDE1AAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRp
b25UaHJvd3MBAADscwAAAAAAAAAAAAAOdAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHQAAAAA
AAAAAAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAA
MAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFiAAAAUBAAAAAAAAAAAAAAUBDQAAABWAFMAXwBW
AEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAsUU5GAAAAQCxRTkYPwAAAAAA
AAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAE
AAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEdAMAAAEAUwB0AHIAaQBuAGcARgBpAGwA
ZQBJAG4AZgBvAAAAUAMAAAEAMAAwADAAMAAwADQAYgAwAAAANAAJAAEAQwBvAG0AcABhAG4AeQBO
AGEAbQBlAAAAAAByAGkAZwBoAHQALQBvAG4AAAAAAIAAKwABAEYAaQBsAGUARABlAHMAYwByAGkA
cAB0AGkAbwBuAAAAAABTAFQAXwA2ADYANwA2AGQAOABiADcAMQA4ADcAMwA0ADIAYQA3ADkAYwBj
ADcAMwBlADUAMAAwADEAOQBiADcANgA5ADAALgBjAHMAcAByAG8AagAAAAAAQAAPAAEARgBpAGwA
ZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADYAMgAwADEALgAxADcAOAA0ADEAAAAAAHAAKAAB
AEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMQA4ADUAOQAzADIAMgA5ADYAMgAxADEA
NAA4ADMAOABhAGQAOABmADUAMgBmAGUAZgA1ADcAZgAxADIANgAzAC4AZABsAGwAAABYABoAAQBM
AGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAByAGkA
ZwBoAHQALQBvAG4AIAAyADAAMQA1AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBh
AG0AZQAAAFMAVABfADEAOAA1ADkAMwAyADIAOQA2ADIAMQAxADQAOAAzADgAYQBkADgAZgA1ADIA
ZgBlAGYANQA3AGYAMQAyADYAMwAuAGQAbABsAAAAeAArAAEAUAByAG8AZAB1AGMAdABOAGEAbQBl
AAAAAABTAFQAXwA2ADYANwA2AGQAOABiADcAMQA4ADcAMwA0ADIAYQA3ADkAYwBjADcAMwBlADUA
MAAwADEAOQBiADcANgA5ADAALgBjAHMAcAByAG8AagAAAAAARAAPAAEAUAByAG8AZAB1AGMAdABW
AGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADIAMAAxAC4AMQA3ADgANAAxAAAAAABIAA8AAQBBAHMA
cwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADIAMAAxAC4AMQA3ADgANAAx
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAABwAAAMAAAAIDQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\CHECK FILE EXISTS OR NOT (IF EXISTS THEN IMPORT DATA).PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{C61BC3D1-CAFD-4BC9-95B4-CFFD0432C2FD}"
          DTS:From="Package\CHECK FILE EXISTS OR NOT (IF EXISTS THEN IMPORT DATA)\全体パッケージの実行とエラーチェック"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\CHECK FILE EXISTS OR NOT (IF EXISTS THEN IMPORT DATA)\ファイルを待ちます(SLEEP)" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\データインポートメール送信"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="スクリプト タスク"
      DTS:Disabled="True"
      DTS:DTSID="{D48A92AC-E0B8-4B07-BAA9-C0BFB9368445}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="1041"
      DTS:ObjectName="データインポートメール送信"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_659450cee2b64a3aa096c7138bb715b4"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::connectionString">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_659450cee2b64a3aa096c7138bb715b4.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("right-on")]
[assembly: AssemblyProduct("ST_659450cee2b64a3aa096c7138bb715b4.csproj")]
[assembly: AssemblyCopyright("Copyright @ right-on 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="st_659450cee2b64a3aa096c7138bb715b4.csproj"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_659450cee2b64a3aa096c7138bb715b4.csproj</RootNamespace>
    <AssemblyName>ST_659450cee2b64a3aa096c7138bb715b4.csproj</AssemblyName>
    <ProjectGuid>{F6A77600-3BA0-426D-AF56-1EBDC01FDF24}</ProjectGuid>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent></PreBuildEvent>
    <PostBuildEvent></PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using System.Data.SqlClient;
using System.Net;
using System.Net.Mail;
using System.Text;

namespace ST_659450cee2b64a3aa096c7138bb715b4.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region Main Method
        public void Main()
        {
            StringBuilder ObjSB = null;
            // TODO: Add your code here
            //string strFileID = Dts.Variables["FILE_ID"].Value.ToString();
            //DateTime dtStart_Time = Convert.ToDateTime(Dts.Variables["START_TIME"].Value);
            string strCubeSuccessMAILID = string.Empty;
            DataTable dt = null;
            //string strFilePath = Dts.Variables["FILE_PATH"].Value.ToString();
            //string strPackagePath = Dts.Variables["PACKAGE_PATH"].Value.ToString();           

            string strSQLCONNECTION = Dts.Variables["User::connectionString"].Value.ToString();            
            SqlConnection myConnection = new SqlConnection(strSQLCONNECTION);
            SmtpClient client = new SmtpClient("mail.right-on.co.jp", 25);
            client.Credentials = new NetworkCredential("edi", "tani_gami");
            MailAddress AddFrom = new MailAddress("edi@right-on.co.jp", "帳票");
            MailMessage Msg = new MailMessage();
            Msg.From = AddFrom;
            #region get mailid

            StringBuilder strBrMail = new StringBuilder();
            string strErrMailQ = string.Empty;
            strBrMail.Append("SELECT ");
            strBrMail.Append("pkg_success_email ");
            strBrMail.Append("FROM ");
            strBrMail.Append("KANSHI_PKG_MST_EMAIL_DETAILS ");
            strBrMail.Append("WHERE ");
            strBrMail.Append("pkg_email_id=999;");

            strErrMailQ = strBrMail.ToString();
            dt = SelectData(strErrMailQ, myConnection);
            #endregion
            if (dt.Rows.Count > 0)
            {
                strCubeSuccessMAILID = dt.Rows[0][0].ToString();
                //System.Windows.Forms.MessageBox.Show(strCubeSuccessMAILID);
                ObjSB = new StringBuilder();
                DataSet ds = new DataSet();
                #region Select Data to send mail
                ObjSB.Append("SELECT ");
                ObjSB.Append(" mst.pkg_group,mst.pkg_file_name,temp.data_count,temp.start_time,temp.end_time ");
                ObjSB.Append("FROM ");
                ObjSB.Append(" KANSHI_PKG_MST_DETAILS mst ");
                ObjSB.Append("JOIN ");
                ObjSB.Append("KANSHI_PKG_TRN_DETAILS temp ");
                ObjSB.Append("ON ");
                ObjSB.Append("mst.pkg_id=temp.pkg_id ");
                ObjSB.Append("WHERE ");
                ObjSB.Append("temp.is_mail_send='未' ");
                ObjSB.Append("AND ");
                ObjSB.Append(" mst.pkg_type<>'fileType' ");
                ObjSB.Append("AND ");
                ObjSB.Append("temp.pkg_run_status='済' ");
                ObjSB.Append("AND ");
                ObjSB.Append("CAST(temp.import_dt AS date)=CAST(GETDATE() as date) ");
                ObjSB.Append("ORDER BY mst.pkg_group;");

                string strQuery = ObjSB.ToString();
                try
                {
                    myConnection.Open();
                    //OdbcCommand myCommand = new OdbcCommand(strQuery, myConnection);
                    SqlCommand myCommand = new SqlCommand(strQuery, myConnection);
                    myCommand.CommandType = CommandType.Text;
                    //OdbcDataAdapter sqlSelectData = new OdbcDataAdapter();
                    SqlDataAdapter sqlSelectData = new SqlDataAdapter();

                    sqlSelectData.SelectCommand = myCommand;

                    sqlSelectData.Fill(ds);
                    myConnection.Close();
                    // myConnection.Dispose();
                }
                catch (Exception ex)
                {
                    myConnection.Close();
                }
                #endregion
                
                #region Create Mail Body
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ObjSB = null;
                    ObjSB = new StringBuilder();
                    ObjSB.Append("各位、");
                    ObjSB.Append("<BR/><BR/>");
                    ObjSB.Append("これはシステム生成されたメールです。");
                    ObjSB.Append("<BR/><BR/>");
                    ObjSB.Append("取込ファイルの件数：" + ds.Tables[0].Rows.Count);

                    for (int inti = 0; inti <= ds.Tables[0].Rows.Count - 1; inti++)
                    {
                        ObjSB.Append("<BR/><BR/>");
                        ObjSB.Append("Start :" + (inti + 1));
                        ObjSB.Append("<BR/>");

                        /*if (!string.IsNullOrEmpty(ds.Tables[0].Rows[inti]["pkg_group"].ToString()))
                        {
                            ObjSB.Append("Package group：" + ds.Tables[0].Rows[inti]["pkg_group"].ToString());
                        }*/
                        //ObjSB.Append("<BR/>");
                        if (!string.IsNullOrEmpty(ds.Tables[0].Rows[inti]["pkg_file_name"].ToString()))
                        {
                            ObjSB.Append("ファイル名：" + ds.Tables[0].Rows[inti]["pkg_file_name"].ToString());
                        }
                        ObjSB.Append("<BR/>");
                        if (!string.IsNullOrEmpty(ds.Tables[0].Rows[inti]["data_count"].ToString()))
                        {
                            ObjSB.Append("データ：" + ds.Tables[0].Rows[inti]["data_count"].ToString() + "件");
                        }
                        ObjSB.Append("<BR/>");
                        if (!string.IsNullOrEmpty(ds.Tables[0].Rows[inti]["start_time"].ToString()))
                        {
                            ObjSB.Append("開始時間：" + ds.Tables[0].Rows[inti]["start_time"].ToString());
                        }
                        ObjSB.Append("<BR/>");
                        if (!string.IsNullOrEmpty(ds.Tables[0].Rows[inti]["end_time"].ToString()))
                        {
                            ObjSB.Append("完了時間：" + ds.Tables[0].Rows[inti]["end_time"].ToString());
                        }
                        ObjSB.Append("<BR/>");
                        ObjSB.Append("End");
                    }
                    if (!string.IsNullOrEmpty(ObjSB.ToString()))
                    {
                        ObjSB.Append("<BR/><BR/>");
                        ObjSB.Append("以上 ");

                        Msg.To.Add(strCubeSuccessMAILID);
                        //Msg.To.Add("alok@usindia.com,alok.uks@gmail.com,bhavik@usindia.com,bhargavs@usindia.com,ankit@usindia.com,bharat@usindia.com");

                        Msg.Body = ObjSB.ToString();
                        Msg.BodyEncoding = Encoding.UTF8;

                        Msg.Subject = "帳票データ取り込お知らせ_" + DateTime.Now;

                        Msg.SubjectEncoding = Encoding.UTF8;

                        Msg.IsBodyHtml = true;

                        client.Send(Msg);
                    }
                }
                #endregion
                Dts.TaskResult = (int)ScriptResults.Success;
            }
       }
        #endregion

        #region Select Data From DB
        public DataTable SelectData(string strQuery, SqlConnection myConnection)
        {
            DataTable objDT = new DataTable();
            try
            {
                myConnection.Open();
                SqlCommand myCommand = new SqlCommand(strQuery, myConnection);
                myCommand.CommandType = CommandType.Text;
                SqlDataAdapter sqlSelectData = new SqlDataAdapter();
                sqlSelectData.SelectCommand = myCommand;
                sqlSelectData.Fill(objDT);
                myConnection.Close();
                //myConnection.Dispose();
            }
            catch (Exception ex)
            {
                myConnection.Close();
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            return objDT;
        }
        #endregion
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>st_659450cee2b64a3aa096c7138bb715b4</msb:CodeName>
		<msb:DisplayName>st_659450cee2b64a3aa096c7138bb715b4</msb:DisplayName>
		<msb:ProjectId>{E6B3897F-F00A-444F-9B50-C301098EA77C}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="st_659450cee2b64a3aa096c7138bb715b4.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_659450cee2b64a3aa096c7138bb715b4.csproj.Properties.Settings.get_Default():ST_659450cee2b64a3aa096c7138bb715b4.csproj.Properties.Sett" +
    "ings")]

namespace ST_659450cee2b64a3aa096c7138bb715b4.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_659450cee2b64a3aa096c7138bb715b4.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_659450cee2b64a3aa096c7138bb715b4.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_659450cee2b64a3aa096c7138bb715b4.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_659450cee2b64a3aa096c7138bb715b4.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_659450cee2b64a3aa096c7138bb715b4.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_659450cee2b64a3aa096c7138bb715b4.csproj.dll">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
MQAAChZvMgAACm8lAAAKEQ5vJwAACnJKBQBwbzQAAApvGwAACig1AAAKLTkGclwFAHARCm8xAAAK
Fm8yAAAKbyUAAAoRDm8nAAAKckoFAHBvNAAACm8bAAAKKDYAAApvJAAACiYGcs4EAHBvJAAACiYG
cmgFAHBvJAAACiYRDhdYEw4RDhEKbzEAAAoWbzIAAApvJQAACm8mAAAKF1k+x/3//wZvGwAACig1
AAAKLXYGcmwEAHBvJAAACiYGcnAFAHBvJAAACiYRB284AAAKB285AAAKEQcGbxsAAApvOgAAChEH
KDsAAApvPAAAChEHcngFAHAoPQAACow1AAABKDMAAApvPgAAChEHKDsAAApvPwAAChEHF29AAAAK
EQURB29BAAAKAigXAAAKFm9CAAAKKgABEAAAAADxAT0uAgo2AAABGzACAE8AAAADAAARc0MAAAoK
BG8qAAAKAwRzKwAACgsHF28sAAAKcy0AAAoMCAdvLgAACggGb0QAAAomBG8wAAAK3hUmBG8wAAAK
AigXAAAKF29CAAAK3gAGKgABEAAAAAAGADI4ABU2AAABHgIoRQAACiq0AAAAzsrvvgEAAACRAAAA
bFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4w
LjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0
ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNK
QgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAgAUAACN+AADsBQAAkAgAACNTdHJpbmdz
AAAAAHwOAACUBQAAI1VTABAUAAAQAAAAI0dVSUQAAAAgFAAAXAIAACNCbG9iAAAAAAAAAAIAAAFX
HaIBCQMAAAD6JTMAFgAAAQAAADcAAAAFAAAABgAAAAoAAAADAAAARQAAAAIAAAAPAAAAAwAAAAIA
AAADAAAABAAAAAEAAAAFAAAAAQAAAAEAAAAAAAoAAQAAAAAABgDWAM8ACgDyAN0ADgBSASkBBgBu
Ac8ABgCEAXMBBgC1AaABEgBAAjQCEgBgAkoCBgDHAq0CBgDyAuACBgAJA+ACBgAmA+ACBgBFA+AC
BgBeA+ACBgB3A+ACBgCSA+ACBgCtA+ACBgDGA+ACBgD/A98DBgAfBN8DBgBQBD0EBgBtBM8ABgBy
BM8ABgCWBOACCgDCBKwECgDbBKwEBgDwBN8DDgASBSkBBgA0Bc8ADgBBBSkBFgCaBXoFFgCyBXoF
CgDnBdcFCgD9BfIFCgAPBvIFCgAyBtcFCgA+BtcFBgBfBlMGEgB0BjQCEgCPBjQCEgC0BjQCEgC8
BjQCEgDXBsQGEgDpBkoCEgD0BsQGEgD+BjQCEgAaB0oCEgA7B8QGEgBSBzQCBgBxB88ACgCMB9cF
BgC2B1MGBgDZB88ABgAtCM8AEgA3CMQGAAAAAAEAAAAAAAEAAQAAABAAOQBDAAUAAQABAAABEAB5
AEMACQADAAUAAQAQAIIAjQANAAQACAADAQAAuAAAABEABAALABEAlAETABEAwQEXABEACwI5AAYG
eQJPAFaAgQJSAFaAiQJSAFAgAAAAAIMY0QEbAAEAWCAAAAAAkwjXAR8AAQCRIAAAAACTCOsBJAAB
AJggAAAAAJMI9wEpAAEAoCAAAAAAlggbAj0AAgCzIAAAAACGGNEBGwACAKcgAAAAAJEYCwWRAAIA
vCAAAAAAhgAvAhsAAgBkJgAAAACGAG4CRwACANAmAAAAAIYY0QEbAAQAAAABAJECAAABAJcCAAAC
AKACSQDRAWAAUQDRAWAAWQDRAWAAYQDRAWAAaQDRAWAAcQDRAWAAeQDRAWAAgQDRAWAAiQDRAWAA
kQDRAWAAmQDRAWUAoQDRARsAqQDRARsACQDRARsAsQCEBGoAsQCfBHEAKQDRAXYAyQDRAYIA2QDR
ARsAEQDRARsA4QDRARsA6QA7BZUAGQBTBZgA8QCkBZ0A+QC7BaIAAQHEBakACQDOBa0AQQDRAWAA
CQHRAbEAEQHRAbcACQEiBr0AIQHRAbcAKQHRARsAKQFKBsQAMQHRARsAMQFtBssAOQCGBtIAQQGq
BtgAOQG7BdwASQG7BeMAUQHRARsAWQHkBhsAYQHRAegAaQEKB+8AeQHRARsAeQEpB/YAgQFHB/0A
WQFMBxsAUQFmBwQBiQG7BQoB6QB3BxABSQG7BRYB6QB+BxsB6QB3ByAB6QB3ByYBKQGiBy0BmQGp
B2AAKQGtB2AAoQG/BzMBKQHIBzkBqQHiB0ABKQHqB2AAKQH2BzkBKQEKCEYBCQEZCEsB8QAeCGUA
OQDRARsAuQFHB3YBGQDRARsACAAUAFYACAAYAFsAKQCTAIgALgAbAP8BLgAjAP8BLgBjADsCLgAL
AIcBLgATAM8BLgAzAM8BLgArAAUCLgA7ABMCLgBDAP8BLgBbADICQwBrAFsASQCTAIgAYQCbAFsA
gwCrAFsAfQBSAXwBAgABAAMAAwAAAIQBLwAAAAMCNAAAACcCQgACAAIAAwACAAMABQABAAQABQAC
AAUABwAEgAAAAQAAAI0XR1QAAAAAAACNAAAABAAAAAAAAAAAAAAAAQDGAAAAAAAEAAAAAAAAAAAA
AAABAM8AAAAAAAwAAAAAAAAAAAAAAAoACgEAAAAABAAAAAAAAAAAAAAAAQA0AgAAAAAMAAAAAAAA
AAAAAAAKAFsFAAAAAAAAAAABAAAARQgAAAUABAAAAAA8TW9kdWxlPgBTVF82NTk0NTBjZWUyYjY0
YTNhYTA5NmM3MTM4YmI3MTViNC5jc3Byb2ouZGxsAFJlc291cmNlcwBTVF82NTk0NTBjZWUyYjY0
YTNhYTA5NmM3MTM4YmI3MTViNC5jc3Byb2ouUHJvcGVydGllcwBTZXR0aW5ncwBTY3JpcHRNYWlu
AFNUXzY1OTQ1MGNlZTJiNjRhM2FhMDk2YzcxMzhiYjcxNWI0LmNzcHJvagBTY3JpcHRSZXN1bHRz
AG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25T
ZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVu
dW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkds
b2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJj
ZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UA
Z2V0X0RlZmF1bHQARGVmYXVsdABNYWluAFN5c3RlbS5EYXRhAERhdGFUYWJsZQBTeXN0ZW0uRGF0
YS5TcWxDbGllbnQAU3FsQ29ubmVjdGlvbgBTZWxlY3REYXRhAHZhbHVlX18AU3VjY2VzcwBGYWls
dXJlAHZhbHVlAHN0clF1ZXJ5AG15Q29ubmVjdGlvbgBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5n
AFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxl
QXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0
aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRy
aWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1
dGUAQXNzZW1ibHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0
ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1
dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAU3lzdGVtLkRpYWdub3N0aWNzAERlYnVn
Z2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJv
bUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVudE1vZGVsAEVkaXRv
ckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRl
ZEF0dHJpYnV0ZQAuY2N0b3IAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAFN0cmlu
ZwBFbXB0eQBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFu
YWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFZhcmlhYmxlcwBnZXRfVmFy
aWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBUb1N0cmluZwBTeXN0ZW0uTmV0Lk1h
aWwAU210cENsaWVudABTeXN0ZW0uTmV0AE5ldHdvcmtDcmVkZW50aWFsAElDcmVkZW50aWFsc0J5
SG9zdABzZXRfQ3JlZGVudGlhbHMATWFpbEFkZHJlc3MATWFpbE1lc3NhZ2UAc2V0X0Zyb20AU3lz
dGVtLlRleHQAU3RyaW5nQnVpbGRlcgBBcHBlbmQARGF0YVJvd0NvbGxlY3Rpb24AZ2V0X1Jvd3MA
SW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAZ2V0X0NvdW50AERhdGFSb3cARGF0YVNldABTeXN0
ZW0uRGF0YS5Db21tb24ARGJDb25uZWN0aW9uAE9wZW4AU3FsQ29tbWFuZABEYkNvbW1hbmQAQ29t
bWFuZFR5cGUAc2V0X0NvbW1hbmRUeXBlAFNxbERhdGFBZGFwdGVyAHNldF9TZWxlY3RDb21tYW5k
AERhdGFBZGFwdGVyAEZpbGwAQ2xvc2UARGF0YVRhYmxlQ29sbGVjdGlvbgBnZXRfVGFibGVzAElu
dDMyAENvbmNhdABJc051bGxPckVtcHR5AE1haWxBZGRyZXNzQ29sbGVjdGlvbgBnZXRfVG8AQWRk
AHNldF9Cb2R5AEVuY29kaW5nAGdldF9VVEY4AHNldF9Cb2R5RW5jb2RpbmcARGF0ZVRpbWUAZ2V0
X05vdwBzZXRfU3ViamVjdABzZXRfU3ViamVjdEVuY29kaW5nAHNldF9Jc0JvZHlIdG1sAFNlbmQA
c2V0X1Rhc2tSZXN1bHQARXhjZXB0aW9uAERiRGF0YUFkYXB0ZXIAU1RfNjU5NDUwY2VlMmI2NGEz
YWEwOTZjNzEzOGJiNzE1YjQuY3Nwcm9qLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAA
AH9TAFQAXwA2ADUAOQA0ADUAMABjAGUAZQAyAGIANgA0AGEAMwBhAGEAMAA5ADYAYwA3ADEAMwA4
AGIAYgA3ADEANQBiADQALgBjAHMAcAByAG8AagAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUA
cwBvAHUAcgBjAGUAcwAALVUAcwBlAHIAOgA6AGMAbwBuAG4AZQBjAHQAaQBvAG4AUwB0AHIAaQBu
AGcAACdtAGEAaQBsAC4AcgBpAGcAaAB0AC0AbwBuAC4AYwBvAC4AagBwAAEHZQBkAGkAABN0AGEA
bgBpAF8AZwBhAG0AaQAAJWUAZABpAEAAcgBpAGcAaAB0AC0AbwBuAC4AYwBvAC4AagBwAAEFM15o
eQEPUwBFAEwARQBDAFQAIAAAJXAAawBnAF8AcwB1AGMAYwBlAHMAcwBfAGUAbQBhAGkAbAAgAAAL
RgBSAE8ATQAgAAA7SwBBAE4AUwBIAEkAXwBQAEsARwBfAE0AUwBUAF8ARQBNAEEASQBMAF8ARABF
AFQAQQBJAEwAUwAgAAANVwBIAEUAUgBFACAAACNwAGsAZwBfAGUAbQBhAGkAbABfAGkAZAA9ADkA
OQA5ADsAAICfIABtAHMAdAAuAHAAawBnAF8AZwByAG8AdQBwACwAbQBzAHQALgBwAGsAZwBfAGYA
aQBsAGUAXwBuAGEAbQBlACwAdABlAG0AcAAuAGQAYQB0AGEAXwBjAG8AdQBuAHQALAB0AGUAbQBw
AC4AcwB0AGEAcgB0AF8AdABpAG0AZQAsAHQAZQBtAHAALgBlAG4AZABfAHQAaQBtAGUAIAAAOSAA
SwBBAE4AUwBIAEkAXwBQAEsARwBfAE0AUwBUAF8ARABFAFQAQQBJAEwAUwAgAG0AcwB0ACAAAAtK
AE8ASQBOACAAADlLAEEATgBTAEgASQBfAFAASwBHAF8AVABSAE4AXwBEAEUAVABBAEkATABTACAA
dABlAG0AcAAgAAAHTwBOACAAAC9tAHMAdAAuAHAAawBnAF8AaQBkAD0AdABlAG0AcAAuAHAAawBn
AF8AaQBkACAAAC10AGUAbQBwAC4AaQBzAF8AbQBhAGkAbABfAHMAZQBuAGQAPQAnACpnJwAgAAEJ
QQBOAEQAIAAANSAAbQBzAHQALgBwAGsAZwBfAHQAeQBwAGUAPAA+ACcAZgBpAGwAZQBUAHkAcABl
ACcAIAABMXQAZQBtAHAALgBwAGsAZwBfAHIAdQBuAF8AcwB0AGEAdAB1AHMAPQAnAAhuJwAgAAFr
QwBBAFMAVAAoAHQAZQBtAHAALgBpAG0AcABvAHIAdABfAGQAdAAgAEEAUwAgAGQAYQB0AGUAKQA9
AEMAQQBTAFQAKABHAEUAVABEAEEAVABFACgAKQAgAGEAcwAgAGQAYQB0AGUAKQAgAAAvTwBSAEQA
RQBSACAAQgBZACAAbQBzAHQALgBwAGsAZwBfAGcAcgBvAHUAcAA7AAAHBFRNTwEwARU8AEIAUgAv
AD4APABCAFIALwA+AAAlUzCMMG8wtzC5MMYw4DAfdRBiVTCMMF8w4TD8MOswZzBZMAIwARXWU7yP
1TChMKQw6zBuMPZOcGUa/wEPUwB0AGEAcgB0ACAAOgAACzwAQgBSAC8APgAAG3AAawBnAF8AZgBp
AGwAZQBfAG4AYQBtAGUAAA3VMKEwpDDrMA1UGv8BFWQAYQB0AGEAXwBjAG8AdQBuAHQAAAnHMPww
vzAa/wED9k4BFXMAdABhAHIAdABfAHQAaQBtAGUAAAuLlctZQmaTlRr/ARFlAG4AZABfAHQAaQBt
AGUAAAuMW4ZOQmaTlRr/AQdFAG4AZAAAB+VOCk4gAAEbM15oeccw/DC/MNZTijC8j0ow5XeJMFsw
XwABLHEvLrmyh0uf/5NB8tvXEgAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAASFQQA
ABIZBQABARIZBAgAEhUECAASGQMGEgwEAAASDAQIABIMByACEh0OEiECBggDBhEUBAAAAAAEAQAA
AAQgAQEOBCABAQgGAAESWRFdBCAAEmEGIAIBDhJhBAcBEhUFIAEBEWkIAQACAAAAAAADAAABAgYO
BCAAEnkEIAASfQYgARKAgRwDIAAcAyAADgUgAgEOCAUgAgEODgYgAQESgI0GIAEBEoCRBiABEoCZ
DgUgABKAnQMgAAgGIAESgKUIBCABHAgGIAIBDhIhBiABARGAuQYgAQESgLEGIAEIEoCpBSAAEoDF
BSABEh0IBQACDhwcBCABHA4EAAECDgUAAg4ODgYAAw4ODg4FIAASgM0FAAASgNEGIAEBEoDRBQAA
EYDVBCABAQIGIAEBEoCVIwcPEoCZDhIdDhIhEoCFEoCREoCVEoCZDhKAqQ4SgLESgL0IBSABCBId
CgcDEh0SgLESgL1HAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjABAFQOFEZyYW1ld29ya0Rp
c3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQvAQAqU1RfNjU5NDUwY2VlMmI2NGEzYWEwOTZjNzEz
OGJiNzE1YjQuY3Nwcm9qAAAFAQAAAAANAQAIcmlnaHQtb24AAB4BABlDb3B5cmlnaHQgQCByaWdo
dC1vbiAyMDE1AAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBAAA0PgAA
AAAAAAAAAABOPgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQD4AAAAAAAAAAAAAAABfQ29yRGxs
TWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AAA0BAAAAAAAAAAAAAA0BDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAR1SNFwAAAQBHVI0XPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAElAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAcAMAAAEAMAAwADAAMAAwADQA
YgAwAAAANAAJAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAByAGkAZwBoAHQALQBvAG4AAAAA
AIAAKwABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwA2ADUAOQA0ADUA
MABjAGUAZQAyAGIANgA0AGEAMwBhAGEAMAA5ADYAYwA3ADEAMwA4AGIAYgA3ADEANQBiADQALgBj
AHMAcAByAG8AagAAAAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADYA
MAAyADkALgAyADEANQA3ADUAAAAAAIAALwABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBU
AF8ANgA1ADkANAA1ADAAYwBlAGUAMgBiADYANABhADMAYQBhADAAOQA2AGMANwAxADMAOABiAGIA
NwAxADUAYgA0AC4AYwBzAHAAcgBvAGoALgBkAGwAbAAAAAAAWAAaAAEATABlAGcAYQBsAEMAbwBw
AHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAcgBpAGcAaAB0AC0AbwBuACAA
MgAwADEANQAAAIgALwABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwA2
ADUAOQA0ADUAMABjAGUAZQAyAGIANgA0AGEAMwBhAGEAMAA5ADYAYwA3ADEAMwA4AGIAYgA3ADEA
NQBiADQALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAAB4ACsAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAVABfADYANQA5ADQANQAwAGMAZQBlADIAYgA2ADQAYQAzAGEAYQAwADkANgBjADcA
MQAzADgAYgBiADcAMQA1AGIANAAuAGMAcwBwAHIAbwBqAAAAAABEAA8AAQBQAHIAbwBkAHUAYwB0
AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYAMAAyADkALgAyADEANQA3ADUAAAAAAEgADwABAEEA
cwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYAMAAyADkALgAyADEANQA3
ADUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAYD4AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{BB305697-0AEA-46D7-90EC-02A4F58B65AB}"
      DTS:From="Package\CHECK FILE EXISTS OR NOT (IF EXISTS THEN IMPORT DATA)"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\データインポートメール送信" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="199,42"
          Id="Package\CHECK FILE EXISTS OR NOT (IF EXISTS THEN IMPORT DATA)\ファイルを待ちます(SLEEP)"
          TopLeft="134.905660377359,99.792452830189" />
        <NodeLayout
          Size="238,42"
          Id="Package\CHECK FILE EXISTS OR NOT (IF EXISTS THEN IMPORT DATA)\全体パッケージの実行とエラーチェック"
          TopLeft="118,30" />
        <EdgeLayout
          Id="Package\CHECK FILE EXISTS OR NOT (IF EXISTS THEN IMPORT DATA).PrecedenceConstraints[Constraint]"
          TopLeft="235.70283018868,72">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,27.792452830189"
              Start="0,0"
              End="0,20.292452830189">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.292452830189" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43.924528301886795"
          IsExpanded="True"
          PanelSize="453,195"
          Size="453,239"
          Id="Package\CHECK FILE EXISTS OR NOT (IF EXISTS THEN IMPORT DATA)"
          TopLeft="272,46" />
        <NodeLayout
          Size="197,42"
          Id="Package\データインポートメール送信"
          TopLeft="394.575471698113,337.915094339623" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="495.787735849057,285">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,52.915094339623"
              Start="0,0"
              End="0,45.415094339623">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,45.415094339623" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="作成人: Irfan Mansuri&#xA;説明: Package will be call from MAIN_DATA &#xA;Package &amp; this will handle all the 業務 packages &#xA;with its verification and importing by calling its &#xA;required packages from here only."
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="313,100"
          Id="a70696b7-53c6-429a-bb48-a212cc6626a7"
          TopLeft="907,28" />
        <AnnotationLayout
          Text="データインポートメールする。"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="168,39"
          Id="239f0074-85c7-425e-80b3-98f427079d04"
          TopLeft="425,369" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>